{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { mdiClose } from '@mdi/js';\nimport { localize } from '../../localize/localize';\nimport { fetchConfig, saveConfig } from '../data/websockets';\nlet EditMasterDialog = class EditMasterDialog extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n    async showDialog(params) {\n        this._params = params;\n        const config = await fetchConfig(this.hass);\n        this.name = config.master['name'] || '';\n        await this.updateComplete;\n    }\n    async closeDialog() {\n        this._params = undefined;\n    }\n    render() {\n        if (!this._params)\n            return html ``;\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n        <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"cancel\" .path=${mdiClose}>\n          </ha-icon-button>\n            <span slot=\"title\">${localize('panels.general.dialogs.edit_master.title', this.hass.language)}</span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <ha-textfield\n            label=${this.hass.localize('ui.components.area-picker.add_dialog.name')}\n            @input=${(ev) => (this.name = ev.target.value)}\n            value=\"${this.name}\"\n          ></ha-textfield>\n          <span class=\"note\">${localize('panels.general.dialogs.edit_area.name_warning', this.hass.language)}</span>\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this.saveClick}>\n          ${this.hass.localize('ui.common.save')}\n        </mwc-button>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize('ui.common.cancel')}\n        </mwc-button>\n      </ha-dialog>\n    `;\n    }\n    saveClick() {\n        const name = this.name.trim();\n        if (!name.length)\n            return;\n        saveConfig(this.hass, {\n            master: {\n                enabled: true,\n                name: name,\n            },\n        })\n            .catch()\n            .then(() => {\n            this.closeDialog();\n        });\n    }\n    static get styles() {\n        return css `\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      span.note {\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n      }\n    `;\n    }\n};\n__decorate([\n    property({ attribute: false })\n], EditMasterDialog.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], EditMasterDialog.prototype, \"_params\", void 0);\n__decorate([\n    property()\n], EditMasterDialog.prototype, \"name\", void 0);\nEditMasterDialog = __decorate([\n    customElement('edit-master-dialog')\n], EditMasterDialog);\nexport { EditMasterDialog };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts"]}
