{"code":"import { __decorate } from \"tslib\";\nimport { mdiFilterVariant, mdiClose } from '@mdi/js';\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state, query } from 'lit/decorators.js';\nimport { localize } from '../../localize/localize';\nimport './effortlesshome-chip-set';\nimport { omit, pick } from '../helpers';\nlet effortlesshomeTable = class effortlesshomeTable extends LitElement {\n    set filters(data) {\n        if (this.filterConfig)\n            return;\n        this.filterConfig = data;\n    }\n    shouldUpdate(changedProps) {\n        if (changedProps.get('filters') && !this.filterConfig) {\n            this.filterConfig = changedProps.get('filters');\n        }\n        return true;\n    }\n    render() {\n        if (!this.columns || !this.data)\n            return html ``;\n        const filteredData = this.data.filter(e => this.filterTableData(e, this.filterConfig));\n        return html `\n      ${this.renderFilterRow()}\n      <div class=\"table\">\n        ${this.renderHeaderRow()}\n        ${filteredData.length\n            ? filteredData.map(e => this.renderDataRow(e))\n            : html `\n              <div class=\"table-row\">\n                <div class=\"table-cell text grow\">\n                  <slot></slot>\n                </div>\n              </div>\n            `}\n      </div>\n    `;\n    }\n    renderHeaderRow() {\n        if (!this.columns)\n            return html ``;\n        return html `\n      <div class=\"table-row header\">\n        ${Object.values(this.columns).map(e => e.hide\n            ? ''\n            : html `\n                <div\n                  class=\"table-cell ${e.text ? 'text' : ''} ${e.grow ? 'grow' : ''} ${e.align ? e.align : ''}\"\n                  style=\"${e.grow ? '' : `width: ${e.width}`}\"\n                >\n                  <span>${e.title || ''}</span>\n                </div>\n              `)}\n      </div>\n    `;\n    }\n    renderDataRow(data) {\n        if (!this.columns)\n            return html ``;\n        return html `\n      <div\n        class=\"table-row ${this.selectable ? 'selectable' : ''} ${data.warning ? 'warning' : ''}\"\n        @click=${() => this.handleClick(String(data.id))}\n      >\n        ${Object.entries(this.columns).map(([col, e]) => e.hide\n            ? ''\n            : html `\n                <div\n                  class=\"table-cell ${e.text ? 'text' : ''} ${e.grow ? 'grow' : ''} ${e.align ? e.align : ''}\"\n                  style=\"${e.grow ? '' : `width: ${e.width}`}\"\n                >\n                  ${e.renderer ? e.renderer(data) : data[col]}\n                </div>\n              `)}\n      </div>\n    `;\n    }\n    filterTableData(data, filterConfig) {\n        if (!filterConfig)\n            return true;\n        return Object.keys(filterConfig).every(key => {\n            if (!Object.keys(data).includes(key))\n                return true;\n            const filterValue = filterConfig[key].value;\n            if (!filterValue || !filterValue.length)\n                return true;\n            if (Array.isArray(data[key]))\n                return data[key].some(e => filterValue.includes(e));\n            return filterValue.includes(data[key]);\n        });\n    }\n    _getFilteredItems() {\n        return this.data.filter(e => !this.filterTableData(e, this.filterConfig)).length;\n    }\n    handleClick(id) {\n        if (!this.selectable)\n            return;\n        const myEvent = new CustomEvent('row-click', { detail: { id: id } });\n        this.dispatchEvent(myEvent);\n    }\n    renderFilterRow() {\n        var _a;\n        if (!this.filterConfig)\n            return html ``;\n        return html `\n      <div class=\"table-filter\">\n        <ha-icon-button\n          .path=${mdiFilterVariant}\n          ?disabled=${!((_a = this.data) === null || _a === void 0 ? void 0 : _a.length)}\n          label=${localize('components.table.filter.label', this.hass.language)}\n          @click=${this._toggleFilterMenu}\n        ></ha-icon-button>\n        <mwc-menu .corner=${'BOTTOM_START'} .fixed=${true} @closed=${this._applyFilterSelection}>\n          ${this.renderFilterMenu()}\n        </mwc-menu>\n\n        ${this._getFilteredItems()\n            ? html `\n              <effortlesshome-chip cancellable table @button-clicked=${this._clearFilters}>\n                ${localize('components.table.filter.hidden_items', this.hass.language, 'number', this._getFilteredItems())}\n              </effortlesshome-chip>\n            `\n            : ''}\n      </div>\n    `;\n    }\n    _toggleFilterMenu(ev) {\n        const el = ev.target;\n        this._menu.anchor = el;\n        if (this._menu.open)\n            this._menu.close();\n        else {\n            this.filterSelection = Object.entries(this.filterConfig).reduce((acc, [k, v]) => (Object.assign(Object.assign({}, acc), { [k]: pick(v, ['value']) })), {});\n            this._menu.show();\n        }\n    }\n    renderFilterMenu() {\n        if (!this.filterConfig || !this.filterSelection)\n            return html ``;\n        return html `\n      <span class=\"header\">\n        ${localize('components.table.filter.label', this.hass.language)}\n      </span>\n      <ha-icon-button\n        .path=${mdiClose}\n        @click=${() => {\n            this._menu.close();\n            setTimeout(() => this._menu.anchor.blur(), 50);\n        }}\n      ></ha-icon-button>\n      ${Object.keys(this.filterConfig).map(key => {\n            if (this.filterConfig[key].binary) {\n                return html `\n            <div class=\"dropdown-item checkbox\">\n              <ha-checkbox\n                @change=${(ev) => this._updateFilterSelection(key, ev.target.checked)}\n                ?checked=${this.filterSelection[key].value.length}\n              ></ha-checkbox>\n              <span class=\"name\">\n                ${this.filterConfig[key].name}\n              </span>\n            </div>\n          `;\n            }\n            let items = this.filterConfig[key].items;\n            items = items.map(e => {\n                var _a;\n                if (e.badge && typeof e.badge == 'function')\n                    return Object.assign(Object.assign({}, e), { badge: e.badge((_a = this.data) === null || _a === void 0 ? void 0 : _a.filter(a => this.filterTableData(a, omit(this.filterSelection, key)))) });\n                else\n                    return e;\n            });\n            const value = this.filterSelection[key].value;\n            return html `\n          <div class=\"dropdown-item\">\n            <span class=\"name\">\n              ${this.filterConfig[key].name}\n            </span>\n            <effortlesshome-chip-set\n              selectable\n              .items=${items}\n              @value-changed=${(ev) => this._updateFilterSelection(key, ev.detail)}\n              .value=${value}\n            ></effortlesshome-chip-set>\n          </div>\n        `;\n        })}\n    `;\n    }\n    _updateFilterSelection(key, value) {\n        if (typeof value == 'boolean') {\n            value = (value ? this.filterConfig[key].items[0].value : []);\n            if (Object.keys(this.filterConfig).length == 1) {\n                this._menu.close();\n                setTimeout(() => this._menu.anchor.blur(), 50);\n            }\n        }\n        this.filterSelection = Object.assign(Object.assign({}, this.filterSelection), { [key]: { value: value } });\n    }\n    _clearFilters() {\n        Object.keys(this.filterConfig).forEach(key => {\n            this.filterConfig = Object.assign(Object.assign({}, this.filterConfig), { [key]: Object.assign(Object.assign({}, this.filterConfig[key]), { value: [] }) });\n        });\n    }\n    _applyFilterSelection() {\n        Object.keys(this.filterConfig).forEach(key => {\n            this.filterConfig = Object.assign(Object.assign({}, this.filterConfig), { [key]: Object.assign(Object.assign({}, this.filterConfig[key]), this.filterSelection[key]) });\n        });\n    }\n};\neffortlesshomeTable.styles = css `\n    :host {\n      width: 100%;\n    }\n    div.table {\n      display: inline-flex;\n      flex-direction: column;\n      box-sizing: border-box;\n      width: 100%;\n    }\n    div.table .header {\n      font-weight: bold;\n    }\n    div.table-row {\n      display: flex;\n      width: 100%;\n      height: 52px;\n      border-top: 1px solid var(--divider-color);\n      flex-direction: row;\n      position: relative;\n    }\n    div.table-cell {\n      align-self: center;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex-shrink: 0;\n      box-sizing: border-box;\n    }\n    div.table-cell.text {\n      padding: 4px 16px;\n    }\n    div.table-cell.grow {\n      flex-grow: 1;\n      flex-shrink: 1;\n    }\n\n    div.table-cell > ha-switch {\n      width: 68px;\n      height: 48px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    div.table-cell.center {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    div.table-cell.right {\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n    }\n\n    div.table-cell > ha-icon-button {\n      color: var(--secondary-text-color);\n    }\n    div.table-cell > * {\n      transition: color 0.2s ease-in-out;\n    }\n    div.table .header div.table-cell span {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      min-width: 0;\n    }\n    div.table-row.selectable {\n      cursor: pointer;\n    }\n    .table-row::before {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: '';\n      border-radius: 4px;\n    }\n    div.table-row.selectable:hover::before {\n      background-color: rgba(var(--rgb-primary-text-color), 0.5);\n    }\n    div.table-row.warning::before {\n      background-color: var(--error-color);\n      opacity: 0.06;\n    }\n    div.table-row.warning:hover::before {\n      background-color: var(--error-color);\n      opacity: 0.12;\n    }\n    div.table-row.warning span {\n      color: var(--error-color);\n    }\n\n    ha-icon {\n      color: var(--state-icon-color);\n      padding: 8px;\n    }\n\n    .secondary {\n      color: var(--secondary-text-color);\n      display: flex;\n      padding-top: 4px;\n    }\n\n    a,\n    a:visited {\n      color: var(--primary-color);\n    }\n\n    span.disabled {\n      color: var(--secondary-text-color);\n    }\n    span.secondary.disabled {\n      color: var(--disabled-text-color);\n    }\n    ha-icon.disabled {\n      color: var(--state-unavailable-color);\n    }\n\n    div.table-filter {\n      display: flex;\n      width: 100%;\n      min-height: 52px;\n      border-top: 1px solid var(--divider-color);\n      box-sizing: border-box;\n      padding: 2px 8px;\n      flex: 1;\n      position: relative;\n      flex-direction: row;\n      align-items: center;\n    }\n    mwc-menu .header {\n      display: flex;\n      padding: 8px 16px;\n      font-weight: bold;\n    }\n    mwc-menu ha-icon-button {\n      position: absolute;\n      top: 8px;\n      right: 8px;\n    }\n    div.dropdown-item {\n      display: flex;\n      flex-direction: column;\n      flex-shrink: 0;\n      padding: 8px 16px;\n      width: 100%;\n      min-height: 52px;\n      box-sizing: border-box;\n    }\n    div.dropdown-item .name {\n      display: inline-flex;\n    }\n    div.dropdown-item effortlesshome-chips {\n      display: flex;\n      flex-direction: row;\n    }\n    div.dropdown-item.checkbox {\n      flex-direction: row;\n      align-items: center;\n    }\n    ha-button-menu mwc-button {\n      margin-left: 16px;\n    }\n  `;\n__decorate([\n    property()\n], effortlesshomeTable.prototype, \"hass\", void 0);\n__decorate([\n    property()\n], effortlesshomeTable.prototype, \"columns\", void 0);\n__decorate([\n    property()\n], effortlesshomeTable.prototype, \"data\", void 0);\n__decorate([\n    state()\n], effortlesshomeTable.prototype, \"filterConfig\", void 0);\n__decorate([\n    state()\n], effortlesshomeTable.prototype, \"filterSelection\", void 0);\n__decorate([\n    property({ type: Boolean })\n], effortlesshomeTable.prototype, \"selectable\", void 0);\n__decorate([\n    query('mwc-menu', true)\n], effortlesshomeTable.prototype, \"_menu\", void 0);\neffortlesshomeTable = __decorate([\n    customElement('effortlesshome-table')\n], effortlesshomeTable);\nexport { effortlesshomeTable };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-chip-set.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts"]}
