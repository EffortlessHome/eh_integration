{"code":"import { EArmModes } from '../types';\nimport { computeDomain, computeName, getDomain, sortAlphabetically } from '../helpers';\nimport { ESensorTypes, ESensorIcons } from '../const';\nimport { localize } from '../../localize/localize';\nexport const isValidSensor = (entity, showAllDeviceClasses) => {\n    const domain = getDomain(entity.entity_id);\n    if (domain == 'binary_sensor') {\n        if (showAllDeviceClasses)\n            return true;\n        const type = entity.attributes.device_class;\n        if (!type)\n            return false;\n        if ([\n            'carbon_monoxide',\n            'door',\n            'garage_door',\n            'gas',\n            'heat',\n            'lock',\n            'moisture',\n            'motion',\n            'moving',\n            'occupancy',\n            'opening',\n            'presence',\n            'safety',\n            'smoke',\n            'sound',\n            'tamper',\n            'vibration',\n            'window',\n        ].includes(type))\n            return true;\n        return false;\n    }\n    return false;\n};\nexport const sensorClassToType = (stateObj) => {\n    switch (stateObj.attributes.device_class) {\n        case 'door':\n        case 'garage_door':\n        case 'lock':\n        case 'opening':\n            return ESensorTypes.Door;\n        case 'window':\n            return ESensorTypes.Window;\n        case 'carbon_monoxide':\n        case 'gas':\n        case 'heat':\n        case 'moisture':\n        case 'smoke':\n        case 'safety':\n            return ESensorTypes.Environmental;\n        case 'motion':\n        case 'moving':\n        case 'occupancy':\n        case 'presence':\n            return ESensorTypes.Motion;\n        case 'sound':\n        case 'vibration':\n        case 'tamper':\n            return ESensorTypes.Tamper;\n        default:\n            return;\n    }\n};\nexport const sensorConfigByType = (modeList) => {\n    const filterModes = (modes) => modes.filter(e => modeList.includes(e));\n    return {\n        [ESensorTypes.Door]: {\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedHome, EArmModes.ArmedNight, EArmModes.ArmedVacation]),\n            always_on: false,\n            allow_open: false,\n            arm_on_close: false,\n            use_entry_delay: true,\n            use_exit_delay: true,\n        },\n        [ESensorTypes.Window]: {\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedHome, EArmModes.ArmedNight, EArmModes.ArmedVacation]),\n            always_on: false,\n            allow_open: false,\n            arm_on_close: false,\n            use_entry_delay: false,\n            use_exit_delay: false,\n        },\n        [ESensorTypes.Motion]: {\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedVacation]),\n            always_on: false,\n            allow_open: true,\n            arm_on_close: false,\n            use_entry_delay: true,\n            use_exit_delay: true,\n        },\n        [ESensorTypes.Tamper]: {\n            modes: filterModes([\n                EArmModes.ArmedAway,\n                EArmModes.ArmedHome,\n                EArmModes.ArmedNight,\n                EArmModes.ArmedVacation,\n                EArmModes.ArmedCustom,\n            ]),\n            always_on: false,\n            allow_open: false,\n            arm_on_close: false,\n            use_entry_delay: false,\n            use_exit_delay: false,\n        },\n        [ESensorTypes.Environmental]: {\n            modes: filterModes([\n                EArmModes.ArmedAway,\n                EArmModes.ArmedHome,\n                EArmModes.ArmedNight,\n                EArmModes.ArmedVacation,\n                EArmModes.ArmedCustom,\n            ]),\n            always_on: true,\n            allow_open: false,\n            arm_on_close: false,\n            use_entry_delay: false,\n            use_exit_delay: false,\n        },\n    };\n};\nexport function defaultSensorConfig(stateObj, modeList) {\n    if (!stateObj)\n        return null;\n    const domain = computeDomain(stateObj.entity_id);\n    let config = {\n        entity_id: stateObj.entity_id,\n        modes: [],\n        use_entry_delay: true,\n        use_exit_delay: true,\n        arm_on_close: false,\n        allow_open: false,\n        always_on: false,\n        auto_bypass: false,\n        auto_bypass_modes: [],\n        trigger_unavailable: false,\n        type: ESensorTypes.Other,\n        enabled: true,\n    };\n    if (domain == 'binary_sensor') {\n        const type = sensorClassToType(stateObj);\n        if (type) {\n            config = Object.assign(Object.assign(Object.assign({}, config), { type: type }), sensorConfigByType(modeList)[type]);\n        }\n    }\n    return config;\n}\nexport const getSensorTypeOptions = (hass) => Object.entries(ESensorTypes)\n    .filter(([, e]) => e != ESensorTypes.Other)\n    .map(([k, v]) => Object({\n    value: v,\n    name: localize(`panels.sensors.cards.editor.fields.device_type.choose.${v}.name`, hass.language),\n    description: localize(`panels.sensors.cards.editor.fields.device_type.choose.${v}.description`, hass.language),\n    icon: ESensorIcons[k],\n}));\nexport const getConfigurableSensors = (hass, includedSensors, showAllBinarySensors = false) => {\n    const list = Object.values(hass.states)\n        .filter(e => isValidSensor(e, showAllBinarySensors))\n        .filter(e => !includedSensors.includes(e.entity_id))\n        .map(e => Object({\n        id: e.entity_id,\n        name: computeName(e),\n        icon: binarySensorIcon(e),\n    }));\n    list.sort(sortAlphabetically);\n    return list;\n};\nexport const binarySensorIcon = (stateObj, state) => {\n    const is_off = state === 'off';\n    switch (stateObj === null || stateObj === void 0 ? void 0 : stateObj.attributes.device_class) {\n        case 'battery':\n            return is_off ? 'mdi:battery' : 'mdi:battery-outline';\n        case 'battery_charging':\n            return is_off ? 'mdi:battery' : 'mdi:battery-charging';\n        case 'cold':\n            return is_off ? 'mdi:thermometer' : 'mdi:snowflake';\n        case 'connectivity':\n            return is_off ? 'mdi:server-network-off' : 'mdi:server-network';\n        case 'door':\n            return is_off ? 'mdi:door-closed' : 'mdi:door-open';\n        case 'garage_door':\n            return is_off ? 'mdi:garage' : 'mdi:garage-open';\n        case 'power':\n            return is_off ? 'mdi:power-plug-off' : 'mdi:power-plug';\n        case 'gas':\n        case 'problem':\n        case 'safety':\n        case 'tamper':\n            return is_off ? 'mdi:check-circle' : 'mdi:alert-circle';\n        case 'smoke':\n            return is_off ? 'mdi:check-circle' : 'mdi:smoke';\n        case 'heat':\n            return is_off ? 'mdi:thermometer' : 'mdi:fire';\n        case 'light':\n            return is_off ? 'mdi:brightness-5' : 'mdi:brightness-7';\n        case 'lock':\n            return is_off ? 'mdi:lock' : 'mdi:lock-open';\n        case 'moisture':\n            return is_off ? 'mdi:water-off' : 'mdi:water';\n        case 'motion':\n            return is_off ? 'mdi:walk' : 'mdi:run';\n        case 'occupancy':\n            return is_off ? 'mdi:home-outline' : 'mdi:home';\n        case 'opening':\n            return is_off ? 'mdi:square' : 'mdi:square-outline';\n        case 'plug':\n            return is_off ? 'mdi:power-plug-off' : 'mdi:power-plug';\n        case 'presence':\n            return is_off ? 'mdi:home-outline' : 'mdi:home';\n        case 'running':\n            return is_off ? 'mdi:stop' : 'mdi:play';\n        case 'sound':\n            return is_off ? 'mdi:music-note-off' : 'mdi:music-note';\n        case 'update':\n            return is_off ? 'mdi:package' : 'mdi:package-up';\n        case 'vibration':\n            return is_off ? 'mdi:crop-portrait' : 'mdi:vibrate';\n        case 'window':\n            return is_off ? 'mdi:window-closed' : 'mdi:window-open';\n        default:\n            return is_off ? 'mdi:radiobox-blank' : 'mdi:checkbox-marked-circle';\n    }\n};\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts"]}
