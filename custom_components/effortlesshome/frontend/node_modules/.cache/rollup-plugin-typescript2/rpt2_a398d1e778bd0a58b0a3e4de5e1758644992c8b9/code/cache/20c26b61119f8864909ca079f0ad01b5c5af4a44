{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { mdiClose, mdiChevronRight } from '@mdi/js';\nimport { fetchSensors, fetchSensorGroups } from '../data/websockets';\nimport { dialogStyle } from '../styles';\nimport { SubscribeMixin } from '../subscribe-mixin';\nimport { localize } from '../../localize/localize';\nimport { fireEvent } from '../fire_event';\nimport './create-sensor-group-dialog';\nlet ManageSensorGroupsDialog = class ManageSensorGroupsDialog extends SubscribeMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        this.sensorGroups = {};\n        this.sensors = {};\n    }\n    hassSubscribe() {\n        this._fetchData();\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\n    }\n    async _fetchData() {\n        if (!this.hass)\n            return;\n        this.sensorGroups = await fetchSensorGroups(this.hass);\n        this.sensors = await fetchSensors(this.hass);\n    }\n    async showDialog(params) {\n        await this._fetchData();\n        this._params = params;\n        await this.updateComplete;\n    }\n    async closeDialog() {\n        this._params = undefined;\n    }\n    render() {\n        if (!this._params)\n            return html ``;\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n        <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"close\" .path=${mdiClose}>\n          </ha-icon-button>\n          <span slot=\"title\">${localize('panels.sensors.dialogs.manage_groups.title', this.hass.language)}</span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <div class=\"description\">\n            ${localize('panels.sensors.dialogs.manage_groups.description', this.hass.language)}\n          </div>\n          <div class=\"container\">\n            ${Object.keys(this.sensorGroups).length\n            ? Object.values(this.sensorGroups).map(e => this.renderGroup(e))\n            : localize('panels.sensors.dialogs.manage_groups.no_items', this.hass.language)}\n          </div>\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.createGroupClick}>\n          <ha-icon icon=\"hass:plus\"></ha-icon>\n          ${localize('panels.sensors.dialogs.manage_groups.actions.new_group', this.hass.language)}\n        </mwc-button>\n      </ha-dialog>\n    `;\n    }\n    renderGroup(item) {\n        return html `\n    <ha-card\n      outlined\n      @click=${(ev) => this.editGroupClick(ev, item.group_id)}\n    >\n      <ha-icon icon=\"hass:folder-outline\"></ha-icon>\n      <div>\n        <span class=\"name\">${item.name}</span>\n        <span class=\"description\">${localize('panels.general.cards.areas.table.summary_sensors', this.hass.language, '{number}', String(item.entities.length))}\n      </div>\n      <ha-icon-button .path=${mdiChevronRight}>\n      </ha-icon-button>\n    </ha-card>\n    `;\n    }\n    createGroupClick(ev) {\n        const element = ev.target;\n        fireEvent(element, 'show-dialog', {\n            dialogTag: 'create-sensor-group-dialog',\n            dialogImport: () => import('./create-sensor-group-dialog'),\n            dialogParams: {},\n        });\n    }\n    editGroupClick(ev, group_id) {\n        const element = ev.target;\n        fireEvent(element, 'show-dialog', {\n            dialogTag: 'create-sensor-group-dialog',\n            dialogImport: () => import('./create-sensor-group-dialog'),\n            dialogParams: { group_id: group_id },\n        });\n    }\n    static get styles() {\n        return css `\n      ${dialogStyle}\n\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      div.container {\n        display: flex;\n        flex-wrap: wrap;\n      }\n      ha-card {\n        width: 100%;\n        text-align: center;\n        margin: 4px;\n        box-sizing: border-box;\n        padding: 8px;\n        color: var(--primary-text-color);\n        font-size: 16px;\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n      }\n      ha-card:hover {\n        background: rgba(var(--rgb-secondary-text-color), 0.1);\n      }\n      ha-card ha-icon {\n        --mdc-icon-size: 24px;\n        display: flex;\n        flex: 0 0 40px;\n        margin: 0px 10px;\n        align-items: center;\n        color: var(--state-icon-color);\n      }\n      ha-card ha-icon-button {\n        --mdc-icon-size: 24px;\n        display: flex;\n        flex: 0 0 40px;\n        margin: 0px 10px;\n        align-items: center;\n      }\n      ha-card div {\n        display: flex;\n        flex-wrap: wrap;\n        flex: 1;\n      }\n      ha-card span {\n        display: flex;\n        flex: 0 0 100%;\n      }\n      ha-card span.description {\n        color: var(--secondary-text-color);\n      }\n      mwc-button ha-icon {\n        padding-right: 11px;\n      }\n    `;\n    }\n};\n__decorate([\n    property({ attribute: false })\n], ManageSensorGroupsDialog.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], ManageSensorGroupsDialog.prototype, \"_params\", void 0);\n__decorate([\n    property()\n], ManageSensorGroupsDialog.prototype, \"sensorGroups\", void 0);\n__decorate([\n    property()\n], ManageSensorGroupsDialog.prototype, \"sensors\", void 0);\nManageSensorGroupsDialog = __decorate([\n    customElement('manage-sensor-groups-dialog')\n], ManageSensorGroupsDialog);\nexport { ManageSensorGroupsDialog };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-sensor-group-dialog.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-sensor-group-dialog.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-sensor-group-dialog.ts"]}
