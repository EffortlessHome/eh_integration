{"code":"import { html } from 'lit';\nimport { platform, AlarmStates, AlarmCommands } from './const';\nimport { EArmModes } from './types';\nimport { fireEvent } from './fire_event';\nexport function getDomain(entity) {\n    const entity_id = typeof entity == 'string' ? entity : entity.entity_id;\n    return String(entity_id.split('.').shift());\n}\nexport function prettyPrint(input) {\n    input = input.replace('_', ' ');\n    return input.charAt(0).toUpperCase() + input.slice(1);\n}\nexport function computeName(entity) {\n    if (!entity)\n        return '(unrecognized entity)';\n    if (entity.attributes && entity.attributes.friendly_name)\n        return entity.attributes.friendly_name;\n    else\n        return String(entity.entity_id.split('.').pop());\n}\nexport function getAlarmEntity(hass) {\n    return String(hass.panels[platform].config.entity_id);\n}\nexport function isEqual(...arr) {\n    return arr.every(e => JSON.stringify(e) === JSON.stringify(arr[0]));\n}\nexport function Unique(arr) {\n    let res = [];\n    arr.forEach(item => {\n        if (!res.find(e => (typeof item === 'object' ? isEqual(e, item) : e === item)))\n            res.push(item);\n    });\n    return res;\n}\nexport function Without(array, item) {\n    return array.filter(e => e !== item);\n}\nexport function pick(obj, keys) {\n    if (!obj)\n        return {};\n    return Object.entries(obj)\n        .filter(([key]) => keys.includes(key))\n        .reduce((obj, [key, val]) => Object.assign(obj, { [key]: val }), {});\n}\nexport function flatten(arr) {\n    if (arr.every(val => !Array.isArray(val))) {\n        return arr.slice();\n    }\n    return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatten(val) : val), []);\n}\nexport const omit = (obj, ...keys) => {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n};\nexport function isDefined(value) {\n    return value !== null && value !== undefined;\n}\nexport function IsEqual(obj1, obj2) {\n    if (obj1 === null || obj2 === null)\n        return obj1 === obj2;\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length)\n        return false;\n    for (const key of keys1) {\n        if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {\n            if (!IsEqual(obj1[key], obj2[key]))\n                return false;\n        }\n        else if (obj1[key] !== obj2[key])\n            return false;\n    }\n    return true;\n}\nexport function showErrorDialog(ev, error) {\n    const elem = ev.hasOwnProperty('tagName') ? ev : ev.target;\n    fireEvent(elem, 'show-dialog', {\n        dialogTag: 'error-dialog',\n        dialogImport: () => import('./dialogs/error-dialog'),\n        dialogParams: { error: error },\n    });\n}\nexport function handleError(err, ev) {\n    const errorMessage = html `\n    <b>Something went wrong!</b>\n    <br />\n    ${err.body.message\n        ? html `\n          ${err.body.message}\n          <br />\n          <br />\n        `\n        : ''}\n    ${err.error}\n    <br />\n    <br />\n    Please\n    report\n    the bug.\n  `;\n    showErrorDialog(ev, errorMessage);\n}\nexport const commandToState = (command) => {\n    switch (command) {\n        case AlarmCommands.COMMAND_ALARM_DISARM:\n            return AlarmStates.STATE_ALARM_DISARMED;\n        case AlarmCommands.COMMAND_ALARM_ARM_HOME:\n            return AlarmStates.STATE_ALARM_ARMED_HOME;\n        case AlarmCommands.COMMAND_ALARM_ARM_AWAY:\n            return AlarmStates.STATE_ALARM_ARMED_AWAY;\n        case AlarmCommands.COMMAND_ALARM_ARM_NIGHT:\n            return AlarmStates.STATE_ALARM_ARMED_NIGHT;\n        case AlarmCommands.COMMAND_ALARM_ARM_CUSTOM_BYPASS:\n            return AlarmStates.STATE_ALARM_ARMED_CUSTOM_BYPASS;\n        case AlarmCommands.COMMAND_ALARM_ARM_VACATION:\n            return AlarmStates.STATE_ALARM_ARMED_VACATION;\n        default:\n            return undefined;\n    }\n};\nexport const filterState = (state, config) => {\n    var _a, _b, _c, _d, _e;\n    if (!state)\n        return false;\n    switch (state) {\n        case AlarmStates.STATE_ALARM_ARMED_AWAY:\n            return (_a = config[EArmModes.ArmedAway]) === null || _a === void 0 ? void 0 : _a.enabled;\n        case AlarmStates.STATE_ALARM_ARMED_HOME:\n            return (_b = config[EArmModes.ArmedHome]) === null || _b === void 0 ? void 0 : _b.enabled;\n        case AlarmStates.STATE_ALARM_ARMED_NIGHT:\n            return (_c = config[EArmModes.ArmedNight]) === null || _c === void 0 ? void 0 : _c.enabled;\n        case AlarmStates.STATE_ALARM_ARMED_CUSTOM_BYPASS:\n            return (_d = config[EArmModes.ArmedCustom]) === null || _d === void 0 ? void 0 : _d.enabled;\n        case AlarmStates.STATE_ALARM_ARMED_VACATION:\n            return (_e = config[EArmModes.ArmedVacation]) === null || _e === void 0 ? void 0 : _e.enabled;\n        default:\n            return true;\n    }\n};\nexport function Assign(obj, changes) {\n    for (const [key, val] of Object.entries(changes)) {\n        if (key in obj && typeof obj[key] == 'object' && obj[key] !== null) {\n            obj = Object.assign(Object.assign({}, obj), { [key]: Assign(obj[key], val) });\n        }\n        else {\n            obj = Object.assign(Object.assign({}, obj), { [key]: val });\n        }\n    }\n    return obj;\n}\nexport function sortAlphabetically(a, b) {\n    const stringVal = (s) => typeof s === 'object' ? stringVal(s.name) : s.trim().toLowerCase();\n    return stringVal(a) < stringVal(b) ? -1 : 1;\n}\nexport const navigate = (_node, path, replace = false) => {\n    if (replace) {\n        history.replaceState(null, \"\", path);\n    }\n    else {\n        history.pushState(null, \"\", path);\n    }\n    fireEvent(window, \"location-changed\", {\n        replace\n    });\n};\nexport function computeDomain(entityId) {\n    return entityId.substr(0, entityId.indexOf(\".\"));\n}\nexport function computeEntity(entityId) {\n    return entityId.substr(entityId.indexOf(\".\") + 1);\n}\nexport function domainIcon(domain, state) {\n    const fixedIcons = {\n        alert: \"mdi:alert\",\n        automation: \"mdi:playlist-play\",\n        calendar: \"mdi:calendar\",\n        camera: \"mdi:video\",\n        climate: \"mdi:thermostat\",\n        configurator: \"mdi:settings\",\n        conversation: \"mdi:text-to-speech\",\n        device_tracker: \"mdi:account\",\n        fan: \"mdi:fan\",\n        group: \"mdi:google-circles-communities\",\n        history_graph: \"mdi:chart-line\",\n        homeassistant: \"mdi:home-assistant\",\n        homekit: \"mdi:home-automation\",\n        image_processing: \"mdi:image-filter-frames\",\n        input_boolean: \"mdi:drawing\",\n        input_datetime: \"mdi:calendar-clock\",\n        input_number: \"mdi:ray-vertex\",\n        input_select: \"mdi:format-list-bulleted\",\n        input_text: \"mdi:textbox\",\n        light: \"mdi:lightbulb\",\n        mailbox: \"mdi:mailbox\",\n        notify: \"mdi:comment-alert\",\n        person: \"mdi:account\",\n        plant: \"mdi:flower\",\n        proximity: \"mdi:apple-safari\",\n        remote: \"mdi:remote\",\n        scene: \"mdi:google-pages\",\n        script: \"mdi:file-document\",\n        sensor: \"mdi:eye\",\n        simple_alarm: \"mdi:bell\",\n        sun: \"mdi:white-balance-sunny\",\n        switch: \"mdi:flash\",\n        timer: \"mdi:timer\",\n        updater: \"mdi:cloud-upload\",\n        vacuum: \"mdi:robot-vacuum\",\n        water_heater: \"mdi:thermometer\",\n        weblink: \"mdi:open-in-new\"\n    };\n    if (domain in fixedIcons) {\n        return fixedIcons[domain];\n    }\n    switch (domain) {\n        case \"alarm_control_panel\":\n            switch (state) {\n                case \"armed_home\":\n                    return \"mdi:bell-plus\";\n                case \"armed_night\":\n                    return \"mdi:bell-sleep\";\n                case \"disarmed\":\n                    return \"mdi:bell-outline\";\n                case \"triggered\":\n                    return \"mdi:bell-ring\";\n                default:\n                    return \"mdi:bell\";\n            }\n        case \"binary_sensor\":\n            return state && state === \"off\"\n                ? \"mdi:radiobox-blank\"\n                : \"mdi:checkbox-marked-circle\";\n        case \"cover\":\n            return state === \"closed\" ? \"mdi:window-closed\" : \"mdi:window-open\";\n        case \"lock\":\n            return state && state === \"unlocked\" ? \"mdi:lock-open\" : \"mdi:lock\";\n        case \"media_player\":\n            return state && state !== \"off\" && state !== \"idle\"\n                ? \"mdi:cast-connected\"\n                : \"mdi:cast\";\n        case \"zwave\":\n            switch (state) {\n                case \"dead\":\n                    return \"mdi:emoticon-dead\";\n                case \"sleeping\":\n                    return \"mdi:sleep\";\n                case \"initializing\":\n                    return \"mdi:timer-sand\";\n                default:\n                    return \"mdi:z-wave\";\n            }\n        default:\n            return \"mdi:bookmark\";\n    }\n}\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/error-dialog.ts"]}
