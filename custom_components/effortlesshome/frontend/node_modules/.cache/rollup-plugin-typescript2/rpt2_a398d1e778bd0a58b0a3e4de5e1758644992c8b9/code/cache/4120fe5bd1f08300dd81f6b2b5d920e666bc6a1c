{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { mdiPencil } from '@mdi/js';\nimport { prettyPrint, sortAlphabetically } from '../../helpers';\nimport '../../components/settings-row.ts';\nimport '../../components/effortlesshome-table.ts';\nimport '../../dialogs/create-area-dialog';\nimport { commonStyle } from '../../styles';\nimport { localize } from '../../../localize/localize';\nimport { SubscribeMixin } from '../../subscribe-mixin';\nimport { fetchAreas, fetchSensors, fetchAutomations } from '../../data/websockets';\nimport { exportPath } from '../../common/navigation';\nimport { fireEvent } from '../../fire_event';\nlet AreaConfigCard = class AreaConfigCard extends SubscribeMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        this.areas = {};\n        this.sensors = {};\n        this.automations = {};\n    }\n    hassSubscribe() {\n        this._fetchData();\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\n    }\n    async _fetchData() {\n        if (!this.hass)\n            return;\n        this.areas = await fetchAreas(this.hass);\n        this.sensors = await fetchSensors(this.hass);\n        this.automations = await fetchAutomations(this.hass);\n    }\n    render() {\n        if (!this.hass)\n            return html ``;\n        const areas = Object.values(this.areas);\n        areas.sort(sortAlphabetically);\n        const columns = {\n            actions: {\n                width: '48px',\n            },\n            name: {\n                title: this.hass.localize('ui.components.area-picker.add_dialog.name'),\n                width: '40%',\n                grow: true,\n                text: true,\n            },\n            remarks: {\n                title: localize('panels.general.cards.areas.table.remarks', this.hass.language),\n                width: '60%',\n                hide: this.narrow,\n                text: true,\n            },\n        };\n        const data = Object.values(areas).map(item => {\n            const sensors = Object.values(this.sensors).filter(e => e.area == item.area_id).length;\n            const automations = Object.values(areas).length == 1\n                ? Object.values(this.automations).filter(e => { var _a, _b; return ((_a = e.triggers) === null || _a === void 0 ? void 0 : _a.map(e => e.area).includes(item.area_id)) || !((_b = e.triggers) === null || _b === void 0 ? void 0 : _b.map(e => e.area).length); }).length\n                : Object.values(this.automations).filter(e => { var _a; return (_a = e.triggers) === null || _a === void 0 ? void 0 : _a.map(e => e.area).includes(item.area_id); }).length;\n            const summary_sensors = `<a href=\"${exportPath('sensors', { filter: { area: item.area_id } })}\">${localize('panels.general.cards.areas.table.summary_sensors', this.hass.language, 'number', sensors)}</a>`;\n            const summary_automations = `<a href=\"${exportPath('actions', { filter: { area: item.area_id } })}\">${localize('panels.general.cards.areas.table.summary_automations', this.hass.language, 'number', automations)}</a>`;\n            const output = {\n                id: item.area_id,\n                actions: html `\n          <ha-icon-button @click=${(ev) => this.editClick(ev, item.area_id)} .path=${mdiPencil}></ha-icon-button>\n        `,\n                name: prettyPrint(item.name),\n                remarks: unsafeHTML(localize('panels.general.cards.areas.table.summary', this.hass.language, 'summary_sensors', summary_sensors, 'summary_automations', summary_automations)),\n            };\n            return output;\n        });\n        return html `\n      <ha-card header=\"${localize('panels.general.cards.areas.title', this.hass.language)}\">\n        <div class=\"card-content\">\n          ${localize('panels.general.cards.areas.description', this.hass.language)}\n        </div>\n\n        <effortlesshome-table .columns=${columns} .data=${data}>\n          ${localize('panels.general.cards.areas.no_items', this.hass.language)}\n        </effortlesshome-table>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this.addClick}>\n            ${localize('panels.general.cards.areas.actions.add', this.hass.language)}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n    }\n    addClick(ev) {\n        const element = ev.target;\n        fireEvent(element, 'show-dialog', {\n            dialogTag: 'create-area-dialog',\n            dialogImport: () => import('../../dialogs/create-area-dialog'),\n            dialogParams: {},\n        });\n    }\n    editClick(ev, area_id) {\n        const element = ev.target;\n        fireEvent(element, 'show-dialog', {\n            dialogTag: 'create-area-dialog',\n            dialogImport: () => import('../../dialogs/create-area-dialog'),\n            dialogParams: { area_id: area_id },\n        });\n    }\n};\nAreaConfigCard.styles = commonStyle;\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"narrow\", void 0);\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"path\", void 0);\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"config\", void 0);\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"areas\", void 0);\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"sensors\", void 0);\n__decorate([\n    property()\n], AreaConfigCard.prototype, \"automations\", void 0);\nAreaConfigCard = __decorate([\n    customElement('area-config-card')\n], AreaConfigCard);\nexport { AreaConfigCard };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/directives/unsafe-html.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/settings-row.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-area-dialog.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-area-dialog.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-area-dialog.ts"]}
