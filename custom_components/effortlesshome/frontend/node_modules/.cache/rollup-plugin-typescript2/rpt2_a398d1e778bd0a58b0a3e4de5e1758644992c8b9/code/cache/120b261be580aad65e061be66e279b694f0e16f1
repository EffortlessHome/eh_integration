{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement, state } from 'lit/decorators.js';\nimport { mdiClose } from '@mdi/js';\nimport { fetchSensors, fetchSensorGroups, saveSensorGroup, deleteSensorGroup } from '../data/websockets';\nimport { dialogStyle } from '../styles';\nimport { localize } from '../../localize/localize';\nimport { SubscribeMixin } from '../subscribe-mixin';\nimport { computeName, handleError, isDefined, prettyPrint, showErrorDialog, sortAlphabetically } from '../helpers';\nimport { ESensorIcons, ESensorTypes } from '../const';\nimport '../components/effortlesshome-chip-set';\nimport '../components/effortlesshome-select';\nlet CreateSensorGroupDialog = class CreateSensorGroupDialog extends SubscribeMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        this.sensorGroups = {};\n        this.sensors = {};\n    }\n    hassSubscribe() {\n        this._fetchData();\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\n    }\n    async _fetchData() {\n        if (!this.hass)\n            return;\n        this.sensorGroups = await fetchSensorGroups(this.hass);\n        this.sensors = await fetchSensors(this.hass);\n    }\n    async showDialog(params) {\n        await this._fetchData();\n        this._params = params;\n        if (params.group_id && Object.keys(this.sensorGroups).includes(params.group_id)) {\n            this.data = Object.assign({}, this.sensorGroups[params.group_id]);\n        }\n        else {\n            this.data = {\n                name: '',\n                entities: [],\n                timeout: 600,\n                event_count: 2\n            };\n        }\n        await this.updateComplete;\n    }\n    async closeDialog() {\n        this._params = undefined;\n    }\n    render() {\n        if (!this._params)\n            return html ``;\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n      <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"close\" .path=${mdiClose}>\n          </ha-icon-button>\n          <span slot=\"title\">\n            ${this.data.group_id\n            ? localize('panels.sensors.dialogs.edit_group.title', this.hass.language, '{name}', this.sensorGroups[this.data.group_id].name)\n            : localize('panels.sensors.dialogs.create_group.title', this.hass.language)}\n          </span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.name.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.name.description', this.hass.language)}\n            </span>\n            <ha-textfield\n              label=${this.hass.localize('ui.components.area-picker.add_dialog.name')}\n              @input=${(ev) => (this.data = Object.assign(Object.assign({}, this.data), { name: String(ev.target.value).trim() }))}\n              value=\"${this.data.name}\"\n            ></ha-textfield>\n          </settings-row>\n\n          <settings-row large dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.sensors.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.sensors.description', this.hass.language)}\n            </span>\n            <div>\n              ${this.renderSensorOptions()}\n            </div>\n          </settings-row>\n\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.timeout.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.timeout.description', this.hass.language)}\n            </span>\n            <time-slider\n              .hass=${this.hass}\n              min=\"10\"\n              max=\"900\"\n              .value=${this.data.timeout}\n              @value-changed=${(ev) => (this.data = Object.assign(Object.assign({}, this.data), { timeout: ev.detail.value }))}\n            ></time-slider>\n          </settings-row>\n\n          ${this.data.entities.length > 2\n            ? html `\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.event_count.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.event_count.description', this.hass.language)}\n            </span>\n            <effortlesshome-select\n              .hass=${this.hass}\n              .items=${this.renderSensorCountOptions()}\n              ?disabled=${this.data.entities.length <= 2}\n              @value-changed=${(ev) => { this.data = Object.assign(Object.assign({}, this.data), { event_count: Number(ev.detail.value) }); }}\n              .value=${String(this.data.event_count > this.data.entities.length ? this.data.entities.length : this.data.event_count)}\n            ></effortlesshome-select>\n          </settings-row>\n          `\n            : ''}\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.saveClick}>\n          ${this.hass.localize('ui.common.save')}\n        </mwc-button>\n        ${this.data.group_id\n            ? html `\n              <mwc-button slot=\"secondaryAction\" @click=${this.deleteClick} class=\"warning\">\n                ${this.hass.localize('ui.common.delete')}\n              </mwc-button>\n            `\n            : ''}\n      </ha-dialog>\n    `;\n    }\n    renderSensorOptions() {\n        const sensors = Object.keys(this.sensors)\n            .filter(e => !isDefined(this.sensors[e].group) || this.sensors[e].group === this.data.group_id)\n            .map(e => {\n            const stateObj = this.hass.states[e];\n            const type = Object.entries(ESensorTypes).find(([, v]) => v == this.sensors[e].type)[0];\n            return {\n                value: e,\n                name: prettyPrint(computeName(stateObj)),\n                icon: ESensorIcons[type],\n            };\n        });\n        sensors.sort(sortAlphabetically);\n        if (!sensors.length)\n            return localize('panels.sensors.cards.sensors.no_items', this.hass.language);\n        return html `\n      <effortlesshome-chip-set\n        .items=${sensors}\n        .value=${this.data.entities}\n        ?selectable=${true}\n        @value-changed=${(ev) => (this.data = Object.assign(Object.assign({}, this.data), { entities: ev.detail }))}\n      ></effortlesshome-chip-set>\n    `;\n    }\n    renderSensorCountOptions() {\n        let options = [];\n        for (let i = 2; i <= this.data.entities.length; i++) {\n            options = [...options, {\n                    name: `${i}`,\n                    value: `${i}`\n                }];\n        }\n        return options;\n    }\n    saveClick(ev) {\n        if (!this.data.name.length)\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.invalid_name', this.hass.language));\n        else if ((!this.data.group_id || this.data.name != this.sensorGroups[this.data.group_id].name) &&\n            Object.values(this.sensorGroups).find(e => e.name.toLowerCase() == this.data.name.toLowerCase()))\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.invalid_name', this.hass.language));\n        else if (this.data.entities.length < 2)\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.insufficient_sensors', this.hass.language));\n        else {\n            if (this.data.event_count > this.data.entities.length)\n                this.data = Object.assign(Object.assign({}, this.data), { event_count: this.data.entities.length });\n            saveSensorGroup(this.hass, this.data)\n                .catch(e => handleError(e, ev))\n                .then(() => {\n                this.closeDialog();\n            });\n        }\n    }\n    deleteClick(ev) {\n        if (!this.data.group_id)\n            return;\n        deleteSensorGroup(this.hass, this.data.group_id)\n            .catch(e => handleError(e, ev))\n            .then(() => {\n            this.closeDialog();\n        });\n    }\n    static get styles() {\n        return css `\n      ${dialogStyle}\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      mwc-button.warning {\n        --mdc-theme-primary: var(--error-color);\n      }\n    `;\n    }\n};\n__decorate([\n    property({ attribute: false })\n], CreateSensorGroupDialog.prototype, \"hass\", void 0);\n__decorate([\n    state()\n], CreateSensorGroupDialog.prototype, \"_params\", void 0);\n__decorate([\n    property()\n], CreateSensorGroupDialog.prototype, \"sensorGroups\", void 0);\n__decorate([\n    property()\n], CreateSensorGroupDialog.prototype, \"sensors\", void 0);\n__decorate([\n    property()\n], CreateSensorGroupDialog.prototype, \"data\", void 0);\nCreateSensorGroupDialog = __decorate([\n    customElement('create-sensor-group-dialog')\n], CreateSensorGroupDialog);\nexport { CreateSensorGroupDialog };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-select.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-chip-set.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-select.ts"]}
