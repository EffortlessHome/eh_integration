{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css, nothing, render, } from 'lit';\nimport { property, customElement, state, query } from 'lit/decorators.js';\nimport { mdiClose, mdiMenuUp, mdiMenuDown } from '@mdi/js';\nimport { IsEqual, isDefined } from '../helpers';\nimport { directive, Directive, PartType } from 'lit/directive.js';\nimport { fireEvent } from '../fire_event';\nlet effortlesshomeSelect = class effortlesshomeSelect extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.label = '';\n        this.items = [];\n        this.clearable = false;\n        this.icons = false;\n        this.disabled = false;\n        this.invalid = false;\n        this.rowRenderer = item => {\n            const hasDescription = isDefined(item.description);\n            if (this.icons) {\n                return html `\n        <style>\n          mwc-list-item {\n            font-size: 15px;\n            --mdc-typography-body2-font-size: 14px;\n            --mdc-list-item-meta-size: 8px;\n            --mdc-list-item-graphic-margin: 8px;\n          }\n        </style>\n        <mwc-list-item graphic=\"avatar\" .twoline=${hasDescription}>\n          <ha-icon icon=\"${item.icon}\" slot=\"graphic\"></ha-icon>\n          <span>${item.name}</span>\n          ${hasDescription\n                    ? html `\n                <span slot=\"secondary\">${item.description}</span>\n              `\n                    : ''}\n        </mwc-list-item>\n      `;\n            }\n            else {\n                return html `\n        <style>\n          mwc-list-item {\n            font-size: 15px;\n            --mdc-typography-body2-font-size: 14px;\n          }\n        </style>\n        <mwc-list-item .twoline=${hasDescription}>\n          <span>${item.name}</span>\n          ${hasDescription\n                    ? html `\n                <span slot=\"secondary\">${item.description}</span>\n              `\n                    : ''}\n        </mwc-list-item>\n      `;\n            }\n        };\n    }\n    open() {\n        this.updateComplete.then(() => {\n            var _a, _b;\n            (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('vaadin-combo-box-light')) === null || _b === void 0 ? void 0 : _b.open();\n        });\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        if (this._overlayMutationObserver) {\n            this._overlayMutationObserver.disconnect();\n            this._overlayMutationObserver = undefined;\n        }\n    }\n    focus() {\n        this.updateComplete.then(() => {\n            var _a;\n            ((_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('ha-textfield')).focus();\n        });\n    }\n    shouldUpdate(changedProps) {\n        if (changedProps.get('items')) {\n            if (!IsEqual(this.items, changedProps.get('items')))\n                this.firstUpdated();\n            else if (changedProps.size == 1)\n                return false;\n        }\n        return true;\n    }\n    firstUpdated() {\n        this._comboBox.items = this.items;\n    }\n    render() {\n        const hasValue = isDefined(this._value) && this.items.find(e => e.value == this._value);\n        return html `\n      <vaadin-combo-box-light\n        item-value-path=\"value\"\n        item-id-path=\"value\"\n        item-label-path=\"name\"\n        .value=${this._value}\n        ${comboBoxRenderer(this.rowRenderer)}\n        .allowCustomValue=${this.allowCustomValue}\n        ?disabled=${this.disabled}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <ha-textfield\n          .label=${this.label}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n          ?disabled=${this.disabled}\n          ?invalid=${this.invalid}\n          .icon=${this.icons && hasValue}\n        >\n          <ha-icon\n            name=\"icon\"\n            slot=\"leadingIcon\"\n            icon=\"${this.icons && hasValue ? this.items.find(e => e.value == this._value).icon : undefined}\"\n          ></ha-icon>\n        </ha-textfield>\n        <ha-svg-icon\n          class=\"toggle-button ${this.items.length ? '' : 'disabled'}\"\n          .path=${this._opened && this.items.length ? mdiMenuUp : mdiMenuDown}\n          @click=${this._toggleOpen}\n        ></ha-svg-icon>\n        ${this.clearable && hasValue\n            ? html `\n              <ha-svg-icon class=\"clear-button\" @click=${this._clearValue} .path=${mdiClose}></ha-svg-icon>\n            `\n            : ''}\n      </vaadin-combo-box-light>\n    `;\n    }\n    _clearValue(ev) {\n        ev.stopPropagation();\n        this._setValue('');\n    }\n    get _value() {\n        return isDefined(this.value) ? this.value : '';\n    }\n    _toggleOpen(ev) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.items.length) {\n            ev.stopPropagation();\n            return;\n        }\n        if (this._opened) {\n            (_c = (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('vaadin-combo-box-light')) === null || _b === void 0 ? void 0 : _b.inputElement) === null || _c === void 0 ? void 0 : _c.blur();\n            ev.stopPropagation();\n        }\n        else {\n            (_f = (_e = (_d = this.shadowRoot) === null || _d === void 0 ? void 0 : _d.querySelector('vaadin-combo-box-light')) === null || _e === void 0 ? void 0 : _e.inputElement) === null || _f === void 0 ? void 0 : _f.focus();\n        }\n    }\n    _openedChanged(ev) {\n        this._opened = ev.detail.value;\n        if (this._opened && 'MutationObserver' in window && !this._overlayMutationObserver) {\n            const overlay = document.querySelector('vaadin-combo-box-overlay');\n            if (!overlay)\n                return;\n            this._overlayMutationObserver = new MutationObserver(mutations => {\n                mutations.forEach(mutation => {\n                    var _a;\n                    if (mutation.type === 'attributes' &&\n                        mutation.attributeName === 'inert') {\n                        //overlay.inert = false;\n                        (_a = this._overlayMutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n                        this._overlayMutationObserver = undefined;\n                    }\n                    else if (mutation.type === 'childList') {\n                        mutation.removedNodes.forEach(node => {\n                            var _a;\n                            if (node.nodeName === 'VAADIN-COMBO-BOX-OVERLAY') {\n                                (_a = this._overlayMutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n                                this._overlayMutationObserver = undefined;\n                            }\n                        });\n                    }\n                });\n            });\n            this._overlayMutationObserver.observe(overlay, {\n                attributes: true,\n            });\n            this._overlayMutationObserver.observe(document.body, {\n                childList: true,\n            });\n        }\n    }\n    _valueChanged(ev) {\n        const newValue = ev.detail.value;\n        if (newValue !== this._value) {\n            this._setValue(newValue);\n        }\n    }\n    _setValue(value) {\n        this.value = value;\n        setTimeout(() => {\n            fireEvent(this, 'value-changed', { value });\n        }, 0);\n    }\n    static get styles() {\n        return css `\n      :host {\n        display: block;\n      }\n      vaadin-combo-box-light {\n        position: relative;\n      }\n      ha-textfield {\n        width: 100%;\n      }\n      ha-textfield > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      ha-svg-icon {\n        color: var(--input-dropdown-icon-color);\n        position: absolute;\n        cursor: pointer;\n      }\n      ha-svg-icon.disabled {\n        cursor: default;\n        color: var(--disabled-text-color);\n      }\n      .toggle-button {\n        right: 12px;\n        bottom: 5px;\n      }\n      :host([opened]) .toggle-button {\n        color: var(--primary-color);\n      }\n      .clear-button {\n        --mdc-icon-size: 20px;\n        bottom: 5px;\n        right: 36px;\n      }\n    `;\n    }\n};\n__decorate([\n    property()\n], effortlesshomeSelect.prototype, \"label\", void 0);\n__decorate([\n    property()\n], effortlesshomeSelect.prototype, \"value\", void 0);\n__decorate([\n    property()\n], effortlesshomeSelect.prototype, \"items\", void 0);\n__decorate([\n    property()\n], effortlesshomeSelect.prototype, \"clearable\", void 0);\n__decorate([\n    property()\n], effortlesshomeSelect.prototype, \"icons\", void 0);\n__decorate([\n    property({ type: Boolean })\n], effortlesshomeSelect.prototype, \"disabled\", void 0);\n__decorate([\n    state()\n], effortlesshomeSelect.prototype, \"_opened\", void 0);\n__decorate([\n    property({ attribute: 'allow-custom-value', type: Boolean })\n], effortlesshomeSelect.prototype, \"allowCustomValue\", void 0);\n__decorate([\n    property({ type: Boolean })\n], effortlesshomeSelect.prototype, \"invalid\", void 0);\n__decorate([\n    query('vaadin-combo-box-light', true)\n], effortlesshomeSelect.prototype, \"_comboBox\", void 0);\neffortlesshomeSelect = __decorate([\n    customElement('effortlesshome-select')\n], effortlesshomeSelect);\nexport { effortlesshomeSelect };\n// A sentinel that indicates renderer hasn't been initialized\nconst initialValue = {};\nexport class AbstractRendererDirective extends Directive {\n    constructor(part) {\n        super(part);\n        this.previousValue = initialValue;\n        if (part.type !== PartType.ELEMENT) {\n            throw new Error('renderer only supports binding to element');\n        }\n    }\n    render(_renderer, _value) {\n        return nothing;\n    }\n    update(part, [renderer, value]) {\n        var _a;\n        const firstRender = this.previousValue === initialValue;\n        if (!this.hasChanged(value)) {\n            return nothing;\n        }\n        // Copy the value if it's an array so that if it's mutated we don't forget\n        // what the previous values were.\n        this.previousValue = Array.isArray(value) ? Array.from(value) : value;\n        const element = part.element;\n        // TODO: support re-assigning renderer function.\n        if (firstRender) {\n            const host = (_a = part.options) === null || _a === void 0 ? void 0 : _a.host;\n            this.addRenderer(element, renderer, { host });\n        }\n        else {\n            this.runRenderer(element);\n        }\n        return nothing;\n    }\n    hasChanged(value) {\n        let result = true;\n        if (Array.isArray(value)) {\n            // Dirty-check arrays by item\n            if (Array.isArray(this.previousValue) &&\n                this.previousValue.length === value.length &&\n                value.every((v, i) => v === this.previousValue[i])) {\n                result = false;\n            }\n        }\n        else if (this.previousValue === value) {\n            // Dirty-check non-arrays by identity\n            result = false;\n        }\n        return result;\n    }\n}\nclass ComboBoxRendererDirective extends AbstractRendererDirective {\n    /**\n     * Set renderer callback to the element.\n     */\n    addRenderer(element, renderer, options) {\n        element.renderer = (root, comboBox, model) => {\n            render(renderer.call(options.host, model.item, model, comboBox), root, options);\n        };\n    }\n    /**\n     * Run renderer callback on the element.\n     */\n    runRenderer(element) {\n        element.requestContentUpdate();\n    }\n}\nconst rendererDirective = directive(ComboBoxRendererDirective);\nexport const comboBoxRenderer = (renderer, value) => rendererDirective(renderer, value);\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/directive.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts"]}
