{"code":"import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { localize } from '../../localize/localize';\nimport { fireEvent } from '../fire_event';\nexport var ETimeUnits;\n(function (ETimeUnits) {\n    ETimeUnits[\"Seconds\"] = \"sec\";\n    ETimeUnits[\"Minutes\"] = \"min\";\n})(ETimeUnits || (ETimeUnits = {}));\nconst round = (val, step) => {\n    return Math.round(val / step) * step;\n};\nconst calcStepSize = (min, max) => {\n    const stepSizes = [10 / 60, 15 / 60, 20 / 60, 30 / 60, 1, 2, 5];\n    let range = max - min;\n    let step = range / 12;\n    step = stepSizes.reduce((prev, curr) => Math.abs(curr - step) < Math.abs(prev - step) ? curr : prev);\n    return step;\n};\nlet TimeSlider = class TimeSlider extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.step = 0;\n        this.scaleFactor = 1;\n        this.unit = ETimeUnits.Minutes;\n        this.disabled = false;\n        this._min = 0;\n        this._max = 0;\n        this._step = 0;\n    }\n    firstUpdated() {\n        if (this.value > 0 && this.value < 60)\n            this.setUnit(ETimeUnits.Seconds);\n        else\n            this.setUnit(ETimeUnits.Minutes);\n    }\n    setUnit(unit) {\n        this.unit = unit;\n        this.scaleFactor = this.unit == ETimeUnits.Minutes ? 1 / 60 : 1;\n        this._step = calcStepSize(this.min * this.scaleFactor, (ETimeUnits.Minutes ? this.max : 60) * this.scaleFactor);\n        if (this.step && this._step > this.step * this.scaleFactor)\n            this._step = this.step * this.scaleFactor;\n        let min = this.min * this.scaleFactor;\n        if (min < this._step)\n            min = this._step;\n        this._min = this.min ? round(min, this._step) : 0;\n        this._max = (unit == ETimeUnits.Minutes ? round(this.max, this._step) : 60) * this.scaleFactor;\n    }\n    render() {\n        return html `\n      <div class=\"container\">\n        <div class=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </div>\n        <div class=\"slider\">\n          ${this.getSlider()}\n        </div>\n        <div class=\"value${this.disabled ? ' disabled' : ''}\" @click=${this.toggleUnit}>\n          ${this.getValue()}\n        </div>\n      </div>\n    `;\n    }\n    getValue() {\n        const value = round(this.value * this.scaleFactor, this._step);\n        if (!value && this.zeroValue) {\n            return this.zeroValue;\n        }\n        return `${value} ${this.getUnit()}`;\n    }\n    getUnit() {\n        switch (this.unit) {\n            case ETimeUnits.Seconds:\n                return localize('components.time_slider.seconds', this.hass.language);\n            case ETimeUnits.Minutes:\n                return localize('components.time_slider.minutes', this.hass.language);\n            default:\n                return '';\n        }\n    }\n    getSlider() {\n        const val = round(this.value * this.scaleFactor, this._step);\n        return html `\n      <ha-slider\n        labeled\n        min=${this._min}\n        max=${this._max}\n        step=${this._step}\n        value=${val}\n        ?disabled=${this.disabled}\n        @change=${this.updateValue}\n      ></ha-slider>\n    `;\n    }\n    updateValue(e) {\n        const value = Number(e.target.value);\n        this.value = round(value, this._step) / this.scaleFactor;\n        fireEvent(this, 'value-changed', { value: this.value });\n    }\n    toggleUnit() {\n        this.setUnit(this.unit == ETimeUnits.Minutes ? ETimeUnits.Seconds : ETimeUnits.Minutes);\n    }\n};\nTimeSlider.styles = css `\n    :host {\n      display: flex;\n      flex-direction: column;\n      min-width: 250px;\n    }\n\n    div.container {\n      display: grid;\n      grid-template-columns: max-content 1fr 60px;\n      grid-template-rows: min-content;\n      grid-template-areas: 'prefix slider value';\n    }\n\n    div.prefix {\n      grid-area: prefix;\n      display: flex;\n      align-items: center;\n    }\n\n    div.slider {\n      grid-area: slider;\n      display: flex;\n      align-items: center;\n      flex: 1;\n    }\n\n    div.value {\n      grid-area: value;\n      min-width: 40px;\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      cursor: pointer;\n    }\n\n    ha-slider {\n      width: 100%;\n    }\n\n    .disabled {\n      color: var(--disabled-text-color);\n    }\n  `;\n__decorate([\n    property({ type: Number })\n], TimeSlider.prototype, \"min\", void 0);\n__decorate([\n    property({ type: Number })\n], TimeSlider.prototype, \"max\", void 0);\n__decorate([\n    property({ type: Number })\n], TimeSlider.prototype, \"value\", void 0);\n__decorate([\n    property({ type: Number })\n], TimeSlider.prototype, \"step\", void 0);\n__decorate([\n    property()\n], TimeSlider.prototype, \"scaleFactor\", void 0);\n__decorate([\n    property({ type: ETimeUnits })\n], TimeSlider.prototype, \"unit\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TimeSlider.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], TimeSlider.prototype, \"zeroValue\", void 0);\nTimeSlider = __decorate([\n    customElement('time-slider')\n], TimeSlider);\nexport { TimeSlider };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts"]}
