{"code":"import { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators';\nimport { localize } from '../../../localize/localize';\nimport { ESensorIcons, ESensorIconsActive, ESensorTypes } from '../../const';\nimport { fetchAreas, fetchSensors, saveSensor } from '../../data/websockets';\nimport { computeName, handleError, navigate, sortAlphabetically } from '../../helpers';\nimport { commonStyle } from '../../styles';\nimport { SubscribeMixin } from '../../subscribe-mixin';\nimport { getModesList, modesByArea } from '../../common/modes';\nimport { exportPath } from '../../common/navigation';\nimport '../../components/effortlesshome-table';\nconst noArea = 'no_area';\nlet SensorsOverviewCard = class SensorsOverviewCard extends SubscribeMixin(LitElement) {\n    hassSubscribe() {\n        this._fetchData();\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\n    }\n    async _fetchData() {\n        if (!this.hass) {\n            return;\n        }\n        this.areas = await fetchAreas(this.hass);\n        this.sensors = await fetchSensors(this.hass);\n    }\n    async firstUpdated() {\n        if (this.path && this.path.length == 2 && this.path[0] == 'filter')\n            this.selectedArea = this.path[1];\n    }\n    shouldUpdate(changedProps) {\n        const oldHass = changedProps.get('hass');\n        if (oldHass && changedProps.size == 1 && this.sensors) {\n            return Object.keys(this.sensors).some(id => oldHass.states[id] !== this.hass.states[id]);\n        }\n        return true;\n    }\n    render() {\n        if (!this.hass || !this.areas || !this.sensors)\n            return html ``;\n        return html `\n      <ha-card header=\"${localize('panels.sensors.title', this.hass.language)}\">\n        <div class=\"card-content\">\n          ${localize('panels.sensors.cards.sensors.description', this.hass.language)}\n        </div>\n\n        <effortlesshome-table\n          .hass=${this.hass}\n          ?selectable=${true}\n          .columns=${this.tableColumns()}\n          .data=${this.getTableData()}\n          .filters=${this.getTableFilterOptions()}\n          @row-click=${(ev) => navigate(this, exportPath('sensors', { params: { edit: ev.detail.id } }), true)}\n        >\n          ${localize('panels.sensors.cards.sensors.table.no_items', this.hass.language)}\n        </effortlesshome-table>\n      </ha-card>\n    `;\n    }\n    tableColumns() {\n        const warningTooltip = () => html `\n      <simple-tooltip animation-delay=\"0\">\n        ${localize('panels.sensors.cards.sensors.table.no_area_warning', this.hass.language)}\n      </simple-tooltip>\n    `;\n        return {\n            icon: {\n                width: '40px',\n                renderer: (data) => {\n                    const stateObj = this.hass.states[data.entity_id];\n                    const type = Object.keys(ESensorTypes).find(e => ESensorTypes[e] == data.type);\n                    const icon = stateObj ? stateObj.state === \"on\" ? ESensorIconsActive[type] : ESensorIcons[type] : 'hass:help-circle-outline';\n                    return data.area == noArea\n                        ? html `\n                ${warningTooltip()}\n                <ha-icon icon=\"mdi:alert\" style=\"color: var(--error-color)\"></ha-icon>\n              `\n                        : html `\n                <simple-tooltip animation-delay=\"0\">\n                  ${stateObj\n                            ? localize(`panels.sensors.cards.editor.fields.device_type.choose.${data.type}.name`, this.hass.language)\n                            : this.hass.localize('state_badge.default.entity_not_found')}\n                </simple-tooltip>\n                <ha-icon icon=\"${icon}\" class=\"${!data.enabled ? 'disabled' : ''}\"></ha-icon>\n              `;\n                },\n            },\n            name: {\n                title: this.hass.localize('ui.components.entity.entity-picker.entity'),\n                width: '60%',\n                grow: true,\n                text: true,\n                renderer: (data) => html `\n          ${data.area == noArea ? warningTooltip() : ''}\n          <span class=\"${!data.enabled ? 'disabled' : ''}\">${data.name}</span>\n          <span class=\"secondary ${!data.enabled ? 'disabled' : ''}\">${data.entity_id}</span>\n        `,\n            },\n            modes: {\n                title: localize('panels.sensors.cards.sensors.table.arm_modes', this.hass.language),\n                width: '25%',\n                hide: this.narrow,\n                text: true,\n                renderer: (data) => html `\n          ${data.area == noArea ? warningTooltip() : ''}\n          <span class=\"${!data.enabled ? 'disabled' : ''}\">\n            ${data.always_on\n                    ? localize('panels.sensors.cards.sensors.table.always_on', this.hass.language)\n                    : data.modes.length\n                        ? data.modes.map(e => localize(`common.modes_short.${e}`, this.hass.language)).join(', ')\n                        : this.hass.localize('state_attributes.climate.preset_mode.none')}\n          </span>\n        `,\n            },\n            enabled: {\n                title: localize('common.enabled', this.hass.language),\n                width: '68px',\n                align: 'center',\n                renderer: (data) => html `\n          <ha-switch\n            @click=${(ev) => {\n                    ev.stopPropagation();\n                }}\n            ?checked=${data.enabled}\n            @change=${(ev) => this.toggleEnabled(ev, data.entity_id)}\n          ></ha-switch>\n        `,\n            },\n        };\n    }\n    getTableData() {\n        const sensorsList = Object.keys(this.sensors).map(id => {\n            const stateObj = this.hass.states[id];\n            const config = this.sensors[id];\n            const modesList = config.area ? modesByArea(this.areas[config.area]) : getModesList(this.areas);\n            const res = Object.assign(Object.assign({}, config), { id: id, name: computeName(stateObj), modes: config.always_on ? modesList : config.modes.filter(e => modesList.includes(e)), warning: !config.area, area: config.area || noArea });\n            //if (!config.area) res = { ...res, warning: localize('panels.sensors.cards.sensors.no_area', this.hass.language) };\n            return res;\n        });\n        sensorsList.sort(sortAlphabetically);\n        return sensorsList;\n    }\n    toggleEnabled(ev, id) {\n        const enabled = ev.target.checked;\n        saveSensor(this.hass, { entity_id: id, enabled: enabled })\n            .catch(e => handleError(e, ev))\n            .then();\n    }\n    removeCustomName(id) {\n        const data = {\n            entity_id: id,\n            name: '',\n        };\n        saveSensor(this.hass, data);\n    }\n    getTableFilterOptions() {\n        let areaFilterOptions = Object.values(this.areas)\n            .map(e => Object({\n            value: e.area_id,\n            name: e.name,\n            badge: (list) => list.filter(item => item.area == e.area_id).length,\n        }))\n            .sort(sortAlphabetically);\n        if (Object.values(this.sensors).filter(e => !e.area).length)\n            areaFilterOptions = [\n                {\n                    value: noArea,\n                    name: this.hass.localize('state_attributes.climate.preset_mode.none'),\n                    badge: (list) => list.filter(item => item.area == noArea).length,\n                },\n                ...areaFilterOptions,\n            ];\n        const modeFilterOptions = getModesList(this.areas).map(e => Object({\n            value: e,\n            name: localize(`common.modes_short.${e}`, this.hass.language),\n            badge: (list) => list.filter(item => item.modes.includes(e)).length,\n        }));\n        const filterConfig = {\n            area: {\n                name: localize('components.table.filter.item', this.hass.language, 'name', localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)),\n                items: areaFilterOptions,\n                value: this.selectedArea ? [this.selectedArea] : [],\n            },\n            modes: {\n                name: localize('components.table.filter.item', this.hass.language, 'name', localize('panels.actions.cards.new_action.fields.mode.heading', this.hass.language)),\n                items: modeFilterOptions,\n                value: this.selectedMode ? [this.selectedMode] : [],\n            },\n        };\n        return filterConfig;\n    }\n};\nSensorsOverviewCard.styles = commonStyle;\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"hass\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"narrow\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"areas\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"sensors\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"selectedArea\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"selectedMode\", void 0);\n__decorate([\n    property()\n], SensorsOverviewCard.prototype, \"path\", void 0);\nSensorsOverviewCard = __decorate([\n    customElement('sensors-overview-card')\n], SensorsOverviewCard);\nexport { SensorsOverviewCard };\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/modes.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts"]}
