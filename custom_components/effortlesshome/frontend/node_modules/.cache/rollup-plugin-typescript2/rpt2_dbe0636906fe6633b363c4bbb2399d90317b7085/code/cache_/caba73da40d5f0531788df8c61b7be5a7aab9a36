{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { commonStyle } from '../../styles';\r\nimport { fetchUsers, saveUser, deleteUser, fetchAreas } from '../../data/websockets';\r\nimport { localize } from '../../../localize/localize';\r\nimport { omit, showErrorDialog, handleError, sortAlphabetically, navigate } from '../../helpers';\r\nimport { exportPath } from '../../common/navigation';\r\nlet UserEditorCard = class UserEditorCard extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = {\r\n            can_arm: true,\r\n            can_disarm: true,\r\n            is_override_code: false,\r\n        };\r\n        this.repeatCode = '';\r\n        this.areas = {};\r\n    }\r\n    async firstUpdated() {\r\n        this.users = await fetchUsers(this.hass);\r\n        this.areas = await fetchAreas(this.hass);\r\n        if (this.item) {\r\n            const user = this.users[this.item];\r\n            this.data = omit(user, 'code', 'code_format', 'code_length');\r\n        }\r\n        this.data = Object.assign(Object.assign({}, this.data), { area_limit: (this.data.area_limit || []).filter(e => Object.keys(this.areas).includes(e)) });\r\n        if (!(this.data.area_limit || []).length)\r\n            this.data = Object.assign(Object.assign({}, this.data), { area_limit: Object.keys(this.areas) });\r\n    }\r\n    render() {\r\n        var _a;\r\n        if (!this.users)\r\n            return html ``;\r\n        return html `\n      <ha-card>\n        <div class=\"card-header\">\n          <div class=\"name\">\n            ${this.item\r\n            ? localize('panels.codes.cards.edit_user.title', this.hass.language)\r\n            : localize('panels.codes.cards.new_user.title', this.hass.language)}\n          </div>\n          <ha-icon-button .path=${mdiClose} @click=${this.cancelClick}></ha-icon-button>\n        </div>\n        <div class=\"card-content\">\n          ${this.item\r\n            ? localize('panels.codes.cards.edit_user.description', this.hass.language, '{name}', this.users[this.item].name)\r\n            : localize('panels.codes.cards.new_user.description', this.hass.language)}\n        </div>\n\n        <settings-row .narrow=${this.narrow}>\n          <span slot=\"heading\">${localize('panels.codes.cards.new_user.fields.name.heading', this.hass.language)}</span>\n          <span slot=\"description\">\n            ${localize('panels.codes.cards.new_user.fields.name.description', this.hass.language)}\n          </span>\n\n          <ha-textfield\n            label=\"${localize('panels.codes.cards.new_user.fields.name.heading', this.hass.language)}\"\n            placeholder=\"\"\n            value=${this.data.name}\n            @input=${(ev) => (this.data = { ...this.data, name: ev.target.value })}\n          ></ha-textfield>\n        </settings-row>\n\n        ${this.item\r\n            ? html `\n              <settings-row .narrow=${this.narrow}>\n                <span slot=\"heading\">\n                  ${localize('panels.codes.cards.edit_user.fields.old_code.heading', this.hass.language)}\n                </span>\n                <span slot=\"description\">\n                  ${localize('panels.codes.cards.edit_user.fields.old_code.description', this.hass.language)}\n                </span>\n\n                <ha-textfield\n                  label=\"${localize('panels.codes.cards.edit_user.fields.old_code.heading', this.hass.language)}\"\n                  placeholder=\"\"\n                  type=\"password\"\n                  value=${this.data.old_code || ''}\n                  @input=${(ev) => (this.data = { ...this.data, old_code: String(ev.target.value).trim() })}\n                ></ha-textfield>\n              </settings-row>\n            `\r\n            : ''}\n        ${this.item && !((_a = this.data.old_code) === null || _a === void 0 ? void 0 : _a.length)\r\n            ? ''\r\n            : html `\n              <settings-row .narrow=${this.narrow}>\n                <span slot=\"heading\">\n                  ${localize('panels.codes.cards.new_user.fields.code.heading', this.hass.language)}\n                </span>\n                <span slot=\"description\">\n                  ${localize('panels.codes.cards.new_user.fields.code.description', this.hass.language)}\n                </span>\n\n                <ha-textfield\n                  label=\"${localize('panels.codes.cards.new_user.fields.code.heading', this.hass.language)}\"\n                  placeholder=\"\"\n                  type=\"password\"\n                  value=${this.data.code}\n                  @input=${(ev) => (this.data = { ...this.data, code: String(ev.target.value).trim() })}\n                ></ha-textfield>\n              </settings-row>\n\n              <settings-row .narrow=${this.narrow}>\n                <span slot=\"heading\">\n                  ${localize('panels.codes.cards.new_user.fields.confirm_code.heading', this.hass.language)}\n                </span>\n                <span slot=\"description\">\n                  ${localize('panels.codes.cards.new_user.fields.confirm_code.description', this.hass.language)}\n                </span>\n\n                <ha-textfield\n                  label=\"${localize('panels.codes.cards.new_user.fields.confirm_code.heading', this.hass.language)}\"\n                  placeholder=\"\"\n                  type=\"password\"\n                  value=${this.repeatCode || ''}\n                  @input=${(ev) => (this.repeatCode = String(ev.target.value).trim())}\n                ></ha-textfield>\n              </settings-row>\n            `}\n\n        <settings-row .narrow=${this.narrow}>\n          <span slot=\"heading\">\n            ${localize('panels.codes.cards.new_user.fields.can_arm.heading', this.hass.language)}\n          </span>\n          <span slot=\"description\">\n            ${localize('panels.codes.cards.new_user.fields.can_arm.description', this.hass.language)}\n          </span>\n\n          <ha-switch\n            ?checked=${this.data.can_arm}\n            @change=${(ev) => (this.data = { ...this.data, can_arm: ev.target.checked })}\n          ></ha-switch>\n        </settings-row>\n\n        <settings-row .narrow=${this.narrow}>\n          <span slot=\"heading\">\n            ${localize('panels.codes.cards.new_user.fields.can_disarm.heading', this.hass.language)}\n          </span>\n          <span slot=\"description\">\n            ${localize('panels.codes.cards.new_user.fields.can_disarm.description', this.hass.language)}\n          </span>\n\n          <ha-switch\n            ?checked=${this.data.can_disarm}\n            @change=${(ev) => (this.data = { ...this.data, can_disarm: ev.target.checked })}\n          ></ha-switch>\n        </settings-row>\n\n        ${this.getAreaOptions().length >= 2\r\n            ? html `\n              <settings-row .narrow=${this.narrow}>\n                <span slot=\"heading\">\n                  ${localize('panels.codes.cards.new_user.fields.area_limit.heading', this.hass.language)}\n                </span>\n                <span slot=\"description\">\n                  ${localize('panels.codes.cards.new_user.fields.area_limit.description', this.hass.language)}\n                </span>\n\n                <div class=\"checkbox-list\">\n                  ${this.getAreaOptions().map(e => {\r\n                var _a;\r\n                const checked = (this.data.area_limit || []).includes(e.value) || !((_a = this.data.area_limit) === null || _a === void 0 ? void 0 : _a.length);\r\n                return html `\n                      <div>\n                        <ha-checkbox\n                          @change=${(ev) => this.toggleSelectArea(e.value, ev.target.checked)}\n                          ?disabled=${checked && (this.data.area_limit || []).length <= 1}\n                          ?checked=${checked}\n                        ></ha-checkbox>\n                        <span @click=${() => this.toggleSelectArea(e.value, !checked)}>\n                          ${e.name}\n                        </span>\n                      </div>\n                    `;\r\n            })}\n                </div>\n              </settings-row>\n            `\r\n            : ''}\n\n        <settings-row .narrow=${this.narrow}>\n          <span slot=\"heading\">\n            ${localize('panels.codes.cards.new_user.fields.is_override_code.heading', this.hass.language)}\n          </span>\n          <span slot=\"description\">\n            ${localize('panels.codes.cards.new_user.fields.is_override_code.description', this.hass.language)}\n          </span>\n\n          <ha-switch\n            ?checked=${this.data.is_override_code}\n            @change=${(ev) => (this.data = { ...this.data, is_override_code: ev.target.checked })}\n          ></ha-switch>\n        </settings-row>\n\n        <div class=\"card-actions\">\n          <mwc-button @click=${this.saveClick}>\n            ${this.hass.localize('ui.common.save')}\n          </mwc-button>\n\n          ${this.item\r\n            ? html `\n                <mwc-button class=\"warning\" @click=${this.deleteClick}>\n                  ${this.hass.localize('ui.common.delete')}\n                </mwc-button>\n              `\r\n            : ''}\n        </div>\n      </ha-card>\n    `;\r\n    }\r\n    getAreaOptions() {\r\n        let areas = Object.keys(this.areas || {}).map(e => Object({\r\n            value: e,\r\n            name: this.areas[e].name,\r\n        }));\r\n        areas.sort(sortAlphabetically);\r\n        return areas;\r\n    }\r\n    toggleSelectArea(id, checked) {\r\n        if ((this.data.area_limit || []).length <= 1 && !checked)\r\n            return;\r\n        let areaLimit = this.data.area_limit || [];\r\n        areaLimit = checked\r\n            ? areaLimit.includes(id)\r\n                ? areaLimit\r\n                : [...areaLimit, id]\r\n            : areaLimit.includes(id)\r\n                ? areaLimit.filter(e => e != id)\r\n                : areaLimit;\r\n        this.data = Object.assign(Object.assign({}, this.data), { area_limit: areaLimit });\r\n    }\r\n    deleteClick(ev) {\r\n        if (!this.item)\r\n            return;\r\n        deleteUser(this.hass, this.item)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => {\r\n            this.cancelClick();\r\n        });\r\n    }\r\n    saveClick(ev) {\r\n        var _a, _b, _c;\r\n        let data = Object.assign({}, this.data);\r\n        if (!((_a = data.name) === null || _a === void 0 ? void 0 : _a.length))\r\n            showErrorDialog(ev, localize('panels.codes.cards.new_user.errors.no_name', this.hass.language));\r\n        else if ((!((_b = data.code) === null || _b === void 0 ? void 0 : _b.length) || data.code.length < 4) && (!this.item || ((_c = data.old_code) === null || _c === void 0 ? void 0 : _c.length)))\r\n            showErrorDialog(ev, localize('panels.codes.cards.new_user.errors.no_code', this.hass.language));\r\n        else if ((data.code || '').length && data.code !== this.repeatCode) {\r\n            showErrorDialog(ev, localize('panels.codes.cards.new_user.errors.code_mismatch', this.hass.language));\r\n            this.data = omit(this.data, 'code');\r\n            this.repeatCode = '';\r\n        }\r\n        else {\r\n            if (this.item) {\r\n                if ((data.old_code || '').length < 4)\r\n                    omit(data, 'old_code', 'code');\r\n            }\r\n            if (!this.getAreaOptions().length ||\r\n                this.getAreaOptions().every(e => (this.data.area_limit || []).includes(e.value)))\r\n                data = Object.assign(Object.assign({}, data), { area_limit: [] });\r\n            saveUser(this.hass, data)\r\n                .catch(e => handleError(e, ev))\r\n                .then(() => {\r\n                this.cancelClick();\r\n            });\r\n        }\r\n    }\r\n    cancelClick() {\r\n        navigate(this, exportPath('codes'), true);\r\n    }\r\n    static get styles() {\r\n        return css `\n      ${commonStyle}\n      div.checkbox-list {\n        display: flex;\n        flex-direction: row;\n      }\n      div.checkbox-list div {\n        display: flex;\n        align-items: center;\n      }\n      div.checkbox-list div span {\n        cursor: pointer;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property()\r\n], UserEditorCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], UserEditorCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], UserEditorCard.prototype, \"item\", void 0);\r\n__decorate([\r\n    property()\r\n], UserEditorCard.prototype, \"data\", void 0);\r\n__decorate([\r\n    property()\r\n], UserEditorCard.prototype, \"repeatCode\", void 0);\r\nUserEditorCard = __decorate([\r\n    customElement('user-editor-card')\r\n], UserEditorCard);\r\nexport { UserEditorCard };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts"]}
