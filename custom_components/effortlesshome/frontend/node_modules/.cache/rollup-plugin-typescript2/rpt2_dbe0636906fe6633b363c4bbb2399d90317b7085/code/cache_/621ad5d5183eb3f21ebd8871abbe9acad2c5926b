{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { commonStyle } from '../../styles';\r\nimport { localize } from '../../../localize/localize';\r\nimport { EArmModes } from '../../types';\r\nimport { fetchAreas, fetchSensors, saveArea } from '../../data/websockets';\r\nimport { handleError } from '../../helpers';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { EArmModeIcons } from '../../const';\r\nimport '../../components/time-slider';\r\nimport '../../components/effortlesshome-select';\r\nimport '../../components/effortlesshome-collapsible';\r\nimport { exportPath } from '../../common/navigation';\r\nlet AlarmModeCard = class AlarmModeCard extends SubscribeMixin(LitElement) {\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [\r\n            this.hass.connection.subscribeMessage(() => this._fetchData(), {\r\n                type: 'effortlesshome_config_updated',\r\n            }),\r\n        ];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n    }\r\n    async firstUpdated() {\r\n        await this._fetchData();\r\n        this.selectedArea = Object.keys(this.areas)[0];\r\n        this.data = Object.assign({}, this.areas[this.selectedArea].modes);\r\n    }\r\n    render() {\r\n        if (!this.data)\r\n            return html ``;\r\n        return html `\n      <ha-card>\n        <div class=\"card-header\">\n          <div class=\"name\">\n            ${localize('panels.general.cards.modes.title', this.hass.language)}\n          </div>\n\n          ${Object.keys(this.areas).length > 1\r\n            ? html `\n                <effortlesshome-select\n                  .items=${Object.values(this.areas).map(e => Object({ value: e.area_id, name: e.name }))}\n                  value=${this.selectedArea}\n                  label=${this.hass.localize('ui.components.area-picker.area')}\n                  @value-changed=${(ev) => this.selectArea(ev.target.value)}\n                ></effortlesshome-select>\n              `\r\n            : ''}\n        </div>\n        <div class=\"card-content\">\n          ${localize('panels.general.cards.modes.description', this.hass.language)}\n        </div>\n\n        <effortlesshome-collapsible-group>\n          ${Object.entries(EArmModes).map(([k, mode]) => {\r\n            var _a;\r\n            return html `\n                <effortlesshome-collapsible-item>\n                  <effortlesshome-collapsible-header>\n                    <ha-icon slot=\"icon\" icon=\"${EArmModeIcons[k]}\"></ha-icon>\n                    <span slot=\"title\">\n                      ${this.hass.localize(`component.alarm_control_panel.entity_component._.state.${mode}`)}\n                    </span>\n                    <span slot=\"description\">\n                      ${((_a = this.data[mode]) === null || _a === void 0 ? void 0 : _a.enabled) ? html `\n                            ${localize('common.enabled', this.hass.language)},\n                            <a href=\"${exportPath('sensors', { filter: { area: this.selectedArea, mode: mode } })}\">\n                              ${localize('panels.general.cards.modes.number_sensors_active', this.hass.language, 'number', this.getSensorsByMode(mode))}\n                            </a>\n                          `\r\n                : localize('common.disabled', this.hass.language)}\n                    </span>\n                  </effortlesshome-collapsible-header>\n                  <effortlesshome-collapsible-body>\n                    ${this.renderModeConfig(mode)}\n                  </effortlesshome-collapsible-body>\n                </effortlesshome-collapsible-item>\n              `;\r\n        })}\n        </effortlesshome-collapsible-group>\n      </ha-card>\n    `;\r\n    }\r\n    getSensorsByMode(mode) {\r\n        return Object.values(this.sensors).filter(e => e.area == this.selectedArea && (e.modes.includes(mode) || e.always_on)).length;\r\n    }\r\n    renderModeConfig(mode) {\r\n        const config = mode in this.data ? this.data[mode] : undefined;\r\n        return html `\n      <div class=\"description\">\n        <ha-icon icon=\"mdi:information-outline\"></ha-icon>\n        ${localize(`panels.general.cards.modes.modes.${mode}`, this.hass.language)}\n      </div>\n      <settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${localize('panels.general.cards.modes.fields.status.heading', this.hass.language)}\n        </span>\n        <span slot=\"description\">\n          ${localize('panels.general.cards.modes.fields.status.description', this.hass.language)}\n        </span>\n        <div>\n          <mwc-button class=\"${(config === null || config === void 0 ? void 0 : config.enabled) ? 'active' : ''}\" @click=${() => this.saveData(mode, { enabled: true })}>\n            <ha-icon icon=\"mdi:check\"></ha-icon>\n            ${localize('common.enabled', this.hass.language)}\n          </mwc-button>\n          <mwc-button\n            class=\"${(config === null || config === void 0 ? void 0 : config.enabled) ? '' : 'active'}\"\n            @click=${() => this.saveData(mode, { enabled: false })}\n          >\n            <ha-icon icon=\"mdi:close\"></ha-icon>\n            ${localize('common.disabled', this.hass.language)}\n          </mwc-button>\n        </div>\n      </settings-row>\n      <settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${localize('panels.general.cards.modes.fields.exit_delay.heading', this.hass.language)}\n        </span>\n        <span slot=\"description\">\n          ${localize('panels.general.cards.modes.fields.exit_delay.description', this.hass.language)}\n        </span>\n        <time-slider\n          .hass=${this.hass}\n          max=\"300\"\n          zeroValue=${localize('components.time_slider.none', this.hass.language)}\n          value=${(config === null || config === void 0 ? void 0 : config.exit_time) || 0}\n          @value-changed=${(ev) => this.saveData(mode, {\r\n            exit_time: ev.detail.value,\r\n        })}\n          ?disabled=${!(config === null || config === void 0 ? void 0 : config.enabled)}\n        ></time-slider>\n      </settings-row>\n      <settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${localize('panels.general.cards.modes.fields.entry_delay.heading', this.hass.language)}\n        </span>\n        <span slot=\"description\">\n          ${localize('panels.general.cards.modes.fields.entry_delay.description', this.hass.language)}\n        </span>\n        <time-slider\n          .hass=${this.hass}\n          max=\"300\"\n          zeroValue=${localize('components.time_slider.none', this.hass.language)}\n          value=${(config === null || config === void 0 ? void 0 : config.entry_time) || 0}\n          @value-changed=${(ev) => this.saveData(mode, {\r\n            entry_time: ev.detail.value,\r\n        })}\n          ?disabled=${!(config === null || config === void 0 ? void 0 : config.enabled)}\n        ></time-slider>\n      </settings-row>\n      <settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${localize('panels.general.cards.modes.fields.trigger_time.heading', this.hass.language)}\n        </span>\n        <span slot=\"description\">\n          ${localize('panels.general.cards.modes.fields.trigger_time.description', this.hass.language)}\n        </span>\n        <time-slider\n          .hass=${this.hass}\n          max=\"3600\"\n          step=\"60\"\n          zeroValue=${localize('components.time_slider.infinite', this.hass.language)}\n          value=${(config === null || config === void 0 ? void 0 : config.trigger_time) || 0}\n          @value-changed=${(ev) => this.saveData(mode, {\r\n            trigger_time: ev.detail.value,\r\n        })}\n          ?disabled=${!(config === null || config === void 0 ? void 0 : config.enabled)}\n        ></time-slider>\n      </settings-row>\n    `;\r\n    }\r\n    selectArea(area_id) {\r\n        if (area_id == this.selectedArea)\r\n            return;\r\n        this.selectedArea = area_id;\r\n        this.data = Object.assign({}, this.areas[area_id].modes);\r\n    }\r\n    saveClick(ev) {\r\n        saveArea(this.hass, { area_id: this.selectedArea, modes: this.data })\r\n            .catch(e => handleError(e, ev))\r\n            .then();\r\n    }\r\n    saveData(mode, update) {\r\n        const DefaultMode = {\r\n            enabled: false,\r\n            exit_time: 0,\r\n            entry_time: 0,\r\n            trigger_time: 0,\r\n        };\r\n        this.data = Object.assign(Object.assign({}, this.data), { [mode]: Object.assign(Object.assign({}, (this.data[mode] || DefaultMode)), update) });\r\n        saveArea(this.hass, { area_id: this.selectedArea, modes: this.data })\r\n            .catch(e => handleError(e, this.shadowRoot.querySelector('ha-card')))\r\n            .then();\r\n    }\r\n    static get styles() {\r\n        return css `\n      ${commonStyle}\n      effortlesshome-collapsible-header:first-of-type {\n        border-top: 1px solid var(--divider-color);\n      }\n      .description {\n        margin: 8px;\n        padding: 12px;\n        color: var(--primary-color);\n        filter: brightness(0.85);\n        font-size: 14px;\n        line-height: 1.5em;\n        min-height: 36px;\n        display: flex;\n        align-items: center;\n        position: relative;\n      }\n      .description::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: '';\n        background: rgba(var(--rgb-primary-color), 0.12);\n        border-radius: 5px;\n      }\n      .description ha-icon {\n        --mdc-icon-size: 36px;\n        display: inline;\n        float: left;\n        margin-right: 12px;\n        align-self: flex-start;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AlarmModeCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"sensors\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"data\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmModeCard.prototype, \"selectedArea\", void 0);\r\nAlarmModeCard = __decorate([\r\n    customElement('alarm-mode-card')\r\n], AlarmModeCard);\r\nexport { AlarmModeCard };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/time-slider.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-select.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-collapsible.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/time-slider.ts"]}
