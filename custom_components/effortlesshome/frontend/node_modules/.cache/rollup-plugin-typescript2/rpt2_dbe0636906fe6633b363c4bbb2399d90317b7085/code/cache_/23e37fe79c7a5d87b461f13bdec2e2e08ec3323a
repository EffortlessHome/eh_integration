{"code":"import { __decorate } from \"tslib\";\r\nimport { html, LitElement } from 'lit';\r\nimport { customElement, property } from 'lit/decorators';\r\nimport { localize } from '../../../localize/localize';\r\nimport { ESensorIcons, ESensorIconsActive, ESensorTypes } from '../../const';\r\nimport { fetchAreas, fetchSensors, saveSensor } from '../../data/websockets';\r\nimport { computeName, handleError, navigate, sortAlphabetically } from '../../helpers';\r\nimport { commonStyle } from '../../styles';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { getModesList, modesByArea } from '../../common/modes';\r\nimport { exportPath } from '../../common/navigation';\r\nimport '../../components/effortlesshome-table';\r\nconst noArea = 'no_area';\r\nlet SensorsOverviewCard = class SensorsOverviewCard extends SubscribeMixin(LitElement) {\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n    }\r\n    async firstUpdated() {\r\n        if (this.path && this.path.length == 2 && this.path[0] == 'filter')\r\n            this.selectedArea = this.path[1];\r\n    }\r\n    shouldUpdate(changedProps) {\r\n        const oldHass = changedProps.get('hass');\r\n        if (oldHass && changedProps.size == 1 && this.sensors) {\r\n            return Object.keys(this.sensors).some(id => oldHass.states[id] !== this.hass.states[id]);\r\n        }\r\n        return true;\r\n    }\r\n    render() {\r\n        if (!this.hass || !this.areas || !this.sensors)\r\n            return html ``;\r\n        return html `\n      <ha-card header=\"${localize('panels.sensors.title', this.hass.language)}\">\n        <div class=\"card-content\">\n          ${localize('panels.sensors.cards.sensors.description', this.hass.language)}\n        </div>\n\n        <effortlesshome-table\n          .hass=${this.hass}\n          ?selectable=${true}\n          .columns=${this.tableColumns()}\n          .data=${this.getTableData()}\n          .filters=${this.getTableFilterOptions()}\n          @row-click=${(ev) => navigate(this, exportPath('sensors', { params: { edit: ev.detail.id } }), true)}\n        >\n          ${localize('panels.sensors.cards.sensors.table.no_items', this.hass.language)}\n        </effortlesshome-table>\n      </ha-card>\n    `;\r\n    }\r\n    tableColumns() {\r\n        const warningTooltip = () => html `\n      <simple-tooltip animation-delay=\"0\">\n        ${localize('panels.sensors.cards.sensors.table.no_area_warning', this.hass.language)}\n      </simple-tooltip>\n    `;\r\n        return {\r\n            icon: {\r\n                width: '40px',\r\n                renderer: (data) => {\r\n                    const stateObj = this.hass.states[data.entity_id];\r\n                    const type = Object.keys(ESensorTypes).find(e => ESensorTypes[e] == data.type);\r\n                    const icon = stateObj ? stateObj.state === \"on\" ? ESensorIconsActive[type] : ESensorIcons[type] : 'hass:help-circle-outline';\r\n                    return data.area == noArea\r\n                        ? html `\n                ${warningTooltip()}\n                <ha-icon icon=\"mdi:alert\" style=\"color: var(--error-color)\"></ha-icon>\n              `\r\n                        : html `\n                <simple-tooltip animation-delay=\"0\">\n                  ${stateObj\r\n                            ? localize(`panels.sensors.cards.editor.fields.device_type.choose.${data.type}.name`, this.hass.language)\r\n                            : this.hass.localize('state_badge.default.entity_not_found')}\n                </simple-tooltip>\n                <ha-icon icon=\"${icon}\" class=\"${!data.enabled ? 'disabled' : ''}\"></ha-icon>\n              `;\r\n                },\r\n            },\r\n            name: {\r\n                title: this.hass.localize('ui.components.entity.entity-picker.entity'),\r\n                width: '60%',\r\n                grow: true,\r\n                text: true,\r\n                renderer: (data) => html `\n          ${data.area == noArea ? warningTooltip() : ''}\n          <span class=\"${!data.enabled ? 'disabled' : ''}\">${data.name}</span>\n          <span class=\"secondary ${!data.enabled ? 'disabled' : ''}\">${data.entity_id}</span>\n        `,\r\n            },\r\n            modes: {\r\n                title: localize('panels.sensors.cards.sensors.table.arm_modes', this.hass.language),\r\n                width: '25%',\r\n                hide: this.narrow,\r\n                text: true,\r\n                renderer: (data) => html `\n          ${data.area == noArea ? warningTooltip() : ''}\n          <span class=\"${!data.enabled ? 'disabled' : ''}\">\n            ${data.always_on\r\n                    ? localize('panels.sensors.cards.sensors.table.always_on', this.hass.language)\r\n                    : data.modes.length\r\n                        ? data.modes.map(e => localize(`common.modes_short.${e}`, this.hass.language)).join(', ')\r\n                        : this.hass.localize('state_attributes.climate.preset_mode.none')}\n          </span>\n        `,\r\n            },\r\n            enabled: {\r\n                title: localize('common.enabled', this.hass.language),\r\n                width: '68px',\r\n                align: 'center',\r\n                renderer: (data) => html `\n          <ha-switch\n            @click=${(ev) => {\r\n                    ev.stopPropagation();\r\n                }}\n            ?checked=${data.enabled}\n            @change=${(ev) => this.toggleEnabled(ev, data.entity_id)}\n          ></ha-switch>\n        `,\r\n            },\r\n        };\r\n    }\r\n    getTableData() {\r\n        const sensorsList = Object.keys(this.sensors).map(id => {\r\n            const stateObj = this.hass.states[id];\r\n            const config = this.sensors[id];\r\n            const modesList = config.area ? modesByArea(this.areas[config.area]) : getModesList(this.areas);\r\n            const res = Object.assign(Object.assign({}, config), { id: id, name: computeName(stateObj), modes: config.always_on ? modesList : config.modes.filter(e => modesList.includes(e)), warning: !config.area, area: config.area || noArea });\r\n            //if (!config.area) res = { ...res, warning: localize('panels.sensors.cards.sensors.no_area', this.hass.language) };\r\n            return res;\r\n        });\r\n        sensorsList.sort(sortAlphabetically);\r\n        return sensorsList;\r\n    }\r\n    toggleEnabled(ev, id) {\r\n        const enabled = ev.target.checked;\r\n        saveSensor(this.hass, { entity_id: id, enabled: enabled })\r\n            .catch(e => handleError(e, ev))\r\n            .then();\r\n    }\r\n    removeCustomName(id) {\r\n        const data = {\r\n            entity_id: id,\r\n            name: '',\r\n        };\r\n        saveSensor(this.hass, data);\r\n    }\r\n    getTableFilterOptions() {\r\n        let areaFilterOptions = Object.values(this.areas)\r\n            .map(e => Object({\r\n            value: e.area_id,\r\n            name: e.name,\r\n            badge: (list) => list.filter(item => item.area == e.area_id).length,\r\n        }))\r\n            .sort(sortAlphabetically);\r\n        if (Object.values(this.sensors).filter(e => !e.area).length)\r\n            areaFilterOptions = [\r\n                {\r\n                    value: noArea,\r\n                    name: this.hass.localize('state_attributes.climate.preset_mode.none'),\r\n                    badge: (list) => list.filter(item => item.area == noArea).length,\r\n                },\r\n                ...areaFilterOptions,\r\n            ];\r\n        const modeFilterOptions = getModesList(this.areas).map(e => Object({\r\n            value: e,\r\n            name: localize(`common.modes_short.${e}`, this.hass.language),\r\n            badge: (list) => list.filter(item => item.modes.includes(e)).length,\r\n        }));\r\n        const filterConfig = {\r\n            area: {\r\n                name: localize('components.table.filter.item', this.hass.language, 'name', localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)),\r\n                items: areaFilterOptions,\r\n                value: this.selectedArea ? [this.selectedArea] : [],\r\n            },\r\n            modes: {\r\n                name: localize('components.table.filter.item', this.hass.language, 'name', localize('panels.actions.cards.new_action.fields.mode.heading', this.hass.language)),\r\n                items: modeFilterOptions,\r\n                value: this.selectedMode ? [this.selectedMode] : [],\r\n            },\r\n        };\r\n        return filterConfig;\r\n    }\r\n};\r\nSensorsOverviewCard.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"sensors\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"selectedArea\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"selectedMode\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorsOverviewCard.prototype, \"path\", void 0);\r\nSensorsOverviewCard = __decorate([\r\n    customElement('sensors-overview-card')\r\n], SensorsOverviewCard);\r\nexport { SensorsOverviewCard };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/modes.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts"]}
