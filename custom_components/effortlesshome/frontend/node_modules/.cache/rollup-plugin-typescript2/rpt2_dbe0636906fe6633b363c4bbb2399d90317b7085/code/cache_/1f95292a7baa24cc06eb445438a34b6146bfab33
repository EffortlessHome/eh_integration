{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { loadHaForm } from '../../load-ha-elements';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { commonStyle } from '../../styles';\r\nimport { fetchAutomations, saveAutomation, fetchAreas, fetchConfig } from '../../data/websockets';\r\nimport { handleError, isDefined, sortAlphabetically, navigate } from '../../helpers';\r\nimport { localize } from '../../../localize/localize';\r\nimport './notification-editor-card.ts';\r\nimport './automation-editor-card.ts';\r\nimport '../../components/settings-row.ts';\r\nimport { EAutomationTypes } from '../../const';\r\nimport { getAreaOptions } from '../../data/actions';\r\nimport { exportPath } from '../../common/navigation';\r\nconst noArea = 'no_area';\r\nlet AlarmViewActions = class AlarmViewActions extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.areas = {};\r\n        this.getAreaForAutomation = (automation) => {\r\n            if (!this.config)\r\n                return;\r\n            const areaOptions = getAreaOptions(this.areas, this.config);\r\n            let area = automation.triggers[0].area;\r\n            return isDefined(area) && areaOptions.includes(area) ? area : undefined;\r\n        };\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        const automations = await fetchAutomations(this.hass);\r\n        this.automations = Object.values(automations);\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.config = await fetchConfig(this.hass);\r\n    }\r\n    firstUpdated() {\r\n        var _a;\r\n        if (this.path.filter) {\r\n            this.selectedArea = (_a = this.path.filter) === null || _a === void 0 ? void 0 : _a.area;\r\n        }\r\n        (async () => await loadHaForm())();\r\n    }\r\n    render() {\r\n        if (!this.hass || !this.automations || !this.config)\r\n            return html ``;\r\n        if (this.path.subpage == 'new_notification') {\r\n            return html `\n        <notification-editor-card .hass=${this.hass} .narrow=${this.narrow}></notification-editor-card>\n      `;\r\n        }\r\n        else if (this.path.params.edit_notification) {\r\n            const config = this.automations.find(e => e.automation_id == this.path.params.edit_notification && e.type == EAutomationTypes.Notification);\r\n            return html `\n        <notification-editor-card .hass=${this.hass} .narrow=${this.narrow} .item=${config}></notification-editor-card>\n      `;\r\n        }\r\n        else if (this.path.subpage == 'new_action') {\r\n            return html `\n        <automation-editor-card .hass=${this.hass} .narrow=${this.narrow}></automation-editor-card>\n      `;\r\n        }\r\n        else if (this.path.params.edit_action) {\r\n            const config = this.automations.find(e => e.automation_id == this.path.params.edit_action && e.type == EAutomationTypes.Action);\r\n            return html `\n        <automation-editor-card .hass=${this.hass} .narrow=${this.narrow} .item=${config}></automation-editor-card>\n      `;\r\n        }\r\n        else {\r\n            const warningTooltip = () => html `\n        <paper-tooltip animation-delay=\"0\">\n          ${localize('panels.actions.cards.notifications.table.no_area_warning', this.hass.language)}\n        </paper-tooltip>\n      `;\r\n            const columns = {\r\n                type: {\r\n                    width: '40px',\r\n                    renderer: (item) => item.area == noArea && !this.config.master.enabled\r\n                        ? html `\n                  ${warningTooltip()}\n                  <ha-icon icon=\"mdi:alert\" style=\"color: var(--error-color)\"></ha-icon>\n                `\r\n                        : item.type == EAutomationTypes.Notification\r\n                            ? html `\n                  <ha-icon icon=\"hass:message-text-outline\"  class=\"${!item.enabled ? 'disabled' : ''}\"></ha-icon>\n                `\r\n                            : html `\n                  <ha-icon icon=\"hass:flash\"  class=\"${!item.enabled ? 'disabled' : ''}\"></ha-icon>\n                `,\r\n                },\r\n                name: {\r\n                    title: this.hass.localize('ui.components.area-picker.add_dialog.name'),\r\n                    renderer: (item) => html `\n            ${item.area == noArea && !this.config.master.enabled ? warningTooltip() : ''}\n            <span class=\"${!item.enabled ? 'disabled' : ''}\">${item.name}</span>\n          `,\r\n                    width: '40%',\r\n                    grow: true,\r\n                    text: true,\r\n                },\r\n                enabled: {\r\n                    title: localize('common.enabled', this.hass.language),\r\n                    width: '68px',\r\n                    align: 'center',\r\n                    renderer: (item) => html `\n            <ha-switch\n              ?checked=${item.enabled}\n              @click=${(ev) => {\r\n                        ev.stopPropagation();\r\n                        this.toggleEnable(ev, item.automation_id);\r\n                    }}\n            ></ha-switch>\n          `,\r\n                },\r\n            };\r\n            const notificationData = this.automations\r\n                .filter(e => e.type == EAutomationTypes.Notification)\r\n                .map(e => Object(Object.assign(Object.assign({}, e), { id: e.automation_id, warning: !this.config.master.enabled && !this.getAreaForAutomation(e), area: this.getAreaForAutomation(e) || noArea })));\r\n            const automationData = this.automations\r\n                .filter(e => e.type == EAutomationTypes.Action)\r\n                .map(e => Object(Object.assign(Object.assign({}, e), { id: e.automation_id, warning: !this.config.master.enabled && !this.getAreaForAutomation(e), area: this.getAreaForAutomation(e) || noArea })));\r\n            return html `\n        <ha-card header=\"${localize('panels.actions.cards.notifications.title', this.hass.language)}\">\n          <div class=\"card-content\">\n            ${localize('panels.actions.cards.notifications.description', this.hass.language)}\n          </div>\n\n          <effortlesshome-table\n            .hass=${this.hass}\n            ?selectable=${true}\n            .columns=${columns}\n            .data=${notificationData}\n            .filters=${this.getTableFilterOptions()}\n            @row-click=${(ev) => navigate(this, exportPath('actions', { params: { edit_notification: ev.detail.id } }), true)}\n          >\n            ${localize('panels.actions.cards.notifications.table.no_items', this.hass.language)}\n          </effortlesshome-table>\n\n          <div class=\"card-actions\">\n            <mwc-button @click=${this.addNotificationClick}>\n              ${localize('panels.actions.cards.notifications.actions.new_notification', this.hass.language)}\n            </mwc-button>\n          </div>\n        </ha-card>\n\n        <ha-card header=\"${localize('panels.actions.title', this.hass.language)}\">\n          <div class=\"card-content\">${localize('panels.actions.cards.actions.description', this.hass.language)}</div>\n\n          <effortlesshome-table\n            .hass=${this.hass}\n            ?selectable=${true}\n            .columns=${columns}\n            .data=${automationData}\n            .filters=${this.getTableFilterOptions()}\n            @row-click=${(ev) => navigate(this, exportPath('actions', { params: { edit_action: ev.detail.id } }), true)}\n          >\n            ${localize('panels.actions.cards.actions.table.no_items', this.hass.language)}\n          </effortlesshome-table>\n\n          <div class=\"card-actions\">\n            <mwc-button @click=${this.addActionClick}>\n              ${localize('panels.actions.cards.actions.actions.new_action', this.hass.language)}\n            </mwc-button>\n          </div>\n        </ha-card>\n      `;\r\n        }\r\n    }\r\n    toggleEnable(ev, item_id) {\r\n        saveAutomation(this.hass, { automation_id: item_id, enabled: !ev.target.checked })\r\n            .catch(e => handleError(e, ev))\r\n            .then();\r\n    }\r\n    getTableFilterOptions() {\r\n        if (!this.hass)\r\n            return;\r\n        let areaFilterOptions = Object.values(this.areas)\r\n            .map(e => Object({\r\n            value: e.area_id,\r\n            name: e.name,\r\n            badge: (list) => list.filter(item => item.area == e.area_id).length,\r\n        }))\r\n            .sort(sortAlphabetically);\r\n        if (Object.values(this.automations || []).filter(e => !this.getAreaForAutomation(e)).length)\r\n            areaFilterOptions = [\r\n                {\r\n                    value: noArea,\r\n                    name: this.config.master.enabled\r\n                        ? this.config.master.name\r\n                        : this.hass.localize('state_attributes.climate.preset_mode.none'),\r\n                    badge: (list) => list.filter(item => item.area == noArea).length,\r\n                },\r\n                ...areaFilterOptions,\r\n            ];\r\n        const filterConfig = {\r\n            area: {\r\n                name: localize('components.table.filter.item', this.hass.language, 'name', localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)),\r\n                items: areaFilterOptions,\r\n                value: this.selectedArea ? [this.selectedArea] : [],\r\n            },\r\n        };\r\n        return filterConfig;\r\n    }\r\n    addNotificationClick() {\r\n        navigate(this, exportPath('actions', 'new_notification'), true);\r\n    }\r\n    addActionClick() {\r\n        navigate(this, exportPath('actions', 'new_action'), true);\r\n    }\r\n};\r\nAlarmViewActions.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"path\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"alarmEntity\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"automations\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewActions.prototype, \"selectedArea\", void 0);\r\nAlarmViewActions = __decorate([\r\n    customElement('alarm-view-actions')\r\n], AlarmViewActions);\r\nexport { AlarmViewActions };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/load-ha-elements.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-table.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/actions.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/common/navigation.ts"]}
