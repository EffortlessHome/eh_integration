{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement, state } from 'lit/decorators.js';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { saveArea, deleteArea, fetchAreas, fetchSensors, fetchAutomations } from '../data/websockets';\r\nimport { commonStyle } from '../styles';\r\nimport { localize } from '../../localize/localize';\r\nimport { SubscribeMixin } from '../subscribe-mixin';\r\nimport { handleError } from '../helpers';\r\nimport { fireEvent } from '../fire_event';\r\nimport './confirm-delete-dialog';\r\nlet CreateAreaDialog = class CreateAreaDialog extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.areas = {};\r\n        this.sensors = {};\r\n        this.automations = {};\r\n        this.name = '';\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass)\r\n            return;\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n        this.automations = await fetchAutomations(this.hass);\r\n    }\r\n    async showDialog(params) {\r\n        await this._fetchData();\r\n        this._params = params;\r\n        if (params.area_id) {\r\n            this.area_id = params.area_id;\r\n            this.name = this.areas[this.area_id].name;\r\n        }\r\n        await this.updateComplete;\r\n    }\r\n    async closeDialog() {\r\n        this._params = undefined;\r\n        this.area_id = undefined;\r\n        this.name = '';\r\n    }\r\n    render() {\r\n        if (!this._params)\r\n            return html ``;\r\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n        <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"cancel\" .path=${mdiClose}>\n          </ha-icon-button>\n            <span slot=\"title\">\n              ${this.area_id\r\n            ? localize('panels.general.dialogs.edit_area.title', this.hass.language, '{area}', this.areas[this.area_id].name)\r\n            : localize('panels.general.dialogs.create_area.title', this.hass.language)}\n            </span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <ha-textfield\n            label=${this.hass.localize('ui.components.area-picker.add_dialog.name')}\n            @input=${(ev) => (this.name = ev.target.value)}\n            value=\"${this.name}\"\n          ></ha-textfield>\n          ${this.area_id\r\n            ? html `\n                <span class=\"note\">\n                  ${localize('panels.general.dialogs.edit_area.name_warning', this.hass.language)}\n                </span>\n              `\r\n            : ''}\n          ${!this.area_id\r\n            ? html `\n                <effortlesshome-select\n                  .items=${Object.values(this.areas).map(e => Object({ value: e.area_id, name: e.name }))}\n                  value=${this.selectedArea}\n                  label=\"${localize('panels.general.dialogs.create_area.fields.copy_from', this.hass.language)}\"\n                  clearable=${true}\n                  @value-changed=${(ev) => (this.selectedArea = ev.target.value)}\n                ></effortlesshome-select>\n              `\r\n            : ''}\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this.saveClick}>\n          ${this.hass.localize('ui.common.save')}\n        </mwc-button>\n        ${this.area_id\r\n            ? html `\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this.deleteClick}\n                class=\"warning\"\n                ?disabled=${Object.keys(this.areas).length == 1}\n              >\n                ${this.hass.localize('ui.common.delete')}\n              </mwc-button>\n            `\r\n            : ''}\n      </ha-dialog>\n    `;\r\n    }\r\n    saveClick(ev) {\r\n        const name = this.name.trim();\r\n        if (!name.length)\r\n            return;\r\n        let data = {\r\n            name: name,\r\n        };\r\n        if (this.area_id)\r\n            data = Object.assign(Object.assign({}, data), { area_id: this.area_id });\r\n        else if (this.selectedArea)\r\n            data = Object.assign(Object.assign({}, data), { modes: Object.assign({}, this.areas[this.selectedArea].modes) });\r\n        saveArea(this.hass, data)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => {\r\n            this.closeDialog();\r\n        });\r\n    }\r\n    async deleteClick(ev) {\r\n        if (!this.area_id)\r\n            return;\r\n        const sensors = Object.values(this.sensors).filter(e => e.area == this.area_id).length;\r\n        const automations = Object.values(this.automations).filter(e => { var _a; return (_a = e.triggers) === null || _a === void 0 ? void 0 : _a.map(e => e.area).includes(this.area_id); })\r\n            .length;\r\n        let result = false;\r\n        if (sensors || automations) {\r\n            result = await new Promise(resolve => {\r\n                fireEvent(ev.target, 'show-dialog', {\r\n                    dialogTag: 'confirm-delete-dialog',\r\n                    dialogImport: () => import('./confirm-delete-dialog'),\r\n                    dialogParams: {\r\n                        title: localize('panels.general.dialogs.remove_area.title', this.hass.language),\r\n                        description: localize('panels.general.dialogs.remove_area.description', this.hass.language, 'sensors', String(sensors), 'automations', String(automations)),\r\n                        cancel: () => resolve(false),\r\n                        confirm: () => resolve(true),\r\n                    },\r\n                });\r\n            });\r\n        }\r\n        else\r\n            result = true;\r\n        if (result) {\r\n            deleteArea(this.hass, this.area_id)\r\n                .catch(e => handleError(e, ev))\r\n                .then(() => {\r\n                this.closeDialog();\r\n            });\r\n        }\r\n    }\r\n    static get styles() {\r\n        return css `\n      ${commonStyle}\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      span.note {\n        color: var(--secondary-text-color);\n      }\n      ha-textfield {\n        display: block;\n      }\n      effortlesshome-select {\n        margin-top: 10px;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], CreateAreaDialog.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], CreateAreaDialog.prototype, \"_params\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"sensors\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"automations\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"name\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"area_id\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateAreaDialog.prototype, \"selectedArea\", void 0);\r\nCreateAreaDialog = __decorate([\r\n    customElement('create-area-dialog')\r\n], CreateAreaDialog);\r\nexport { CreateAreaDialog };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/confirm-delete-dialog.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/confirm-delete-dialog.ts"]}
