{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement, state } from 'lit/decorators.js';\r\nimport { mdiClose, mdiChevronRight } from '@mdi/js';\r\nimport { fetchSensors, fetchSensorGroups } from '../data/websockets';\r\nimport { dialogStyle } from '../styles';\r\nimport { SubscribeMixin } from '../subscribe-mixin';\r\nimport { localize } from '../../localize/localize';\r\nimport { fireEvent } from '../fire_event';\r\nimport './create-sensor-group-dialog';\r\nlet ManageSensorGroupsDialog = class ManageSensorGroupsDialog extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.sensorGroups = {};\r\n        this.sensors = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass)\r\n            return;\r\n        this.sensorGroups = await fetchSensorGroups(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n    }\r\n    async showDialog(params) {\r\n        await this._fetchData();\r\n        this._params = params;\r\n        await this.updateComplete;\r\n    }\r\n    async closeDialog() {\r\n        this._params = undefined;\r\n    }\r\n    render() {\r\n        if (!this._params)\r\n            return html ``;\r\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n        <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"close\" .path=${mdiClose}>\n          </ha-icon-button>\n          <span slot=\"title\">${localize('panels.sensors.dialogs.manage_groups.title', this.hass.language)}</span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <div class=\"description\">\n            ${localize('panels.sensors.dialogs.manage_groups.description', this.hass.language)}\n          </div>\n          <div class=\"container\">\n            ${Object.keys(this.sensorGroups).length\r\n            ? Object.values(this.sensorGroups).map(e => this.renderGroup(e))\r\n            : localize('panels.sensors.dialogs.manage_groups.no_items', this.hass.language)}\n          </div>\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.createGroupClick}>\n          <ha-icon icon=\"hass:plus\"></ha-icon>\n          ${localize('panels.sensors.dialogs.manage_groups.actions.new_group', this.hass.language)}\n        </mwc-button>\n      </ha-dialog>\n    `;\r\n    }\r\n    renderGroup(item) {\r\n        return html `\n    <ha-card\n      outlined\n      @click=${(ev) => this.editGroupClick(ev, item.group_id)}\n    >\n      <ha-icon icon=\"hass:folder-outline\"></ha-icon>\n      <div>\n        <span class=\"name\">${item.name}</span>\n        <span class=\"description\">${localize('panels.general.cards.areas.table.summary_sensors', this.hass.language, '{number}', String(item.entities.length))}\n      </div>\n      <ha-icon-button .path=${mdiChevronRight}>\n      </ha-icon-button>\n    </ha-card>\n    `;\r\n    }\r\n    createGroupClick(ev) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-sensor-group-dialog',\r\n            dialogImport: () => import('./create-sensor-group-dialog'),\r\n            dialogParams: {},\r\n        });\r\n    }\r\n    editGroupClick(ev, group_id) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-sensor-group-dialog',\r\n            dialogImport: () => import('./create-sensor-group-dialog'),\r\n            dialogParams: { group_id: group_id },\r\n        });\r\n    }\r\n    static get styles() {\r\n        return css `\n      ${dialogStyle}\n\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      div.container {\n        display: flex;\n        flex-wrap: wrap;\n      }\n      ha-card {\n        width: 100%;\n        text-align: center;\n        margin: 4px;\n        box-sizing: border-box;\n        padding: 8px;\n        color: var(--primary-text-color);\n        font-size: 16px;\n        cursor: pointer;\n        display: flex;\n        flex-direction: row;\n      }\n      ha-card:hover {\n        background: rgba(var(--rgb-secondary-text-color), 0.1);\n      }\n      ha-card ha-icon {\n        --mdc-icon-size: 24px;\n        display: flex;\n        flex: 0 0 40px;\n        margin: 0px 10px;\n        align-items: center;\n        color: var(--state-icon-color);\n      }\n      ha-card ha-icon-button {\n        --mdc-icon-size: 24px;\n        display: flex;\n        flex: 0 0 40px;\n        margin: 0px 10px;\n        align-items: center;\n      }\n      ha-card div {\n        display: flex;\n        flex-wrap: wrap;\n        flex: 1;\n      }\n      ha-card span {\n        display: flex;\n        flex: 0 0 100%;\n      }\n      ha-card span.description {\n        color: var(--secondary-text-color);\n      }\n      mwc-button ha-icon {\n        padding-right: 11px;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], ManageSensorGroupsDialog.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], ManageSensorGroupsDialog.prototype, \"_params\", void 0);\r\n__decorate([\r\n    property()\r\n], ManageSensorGroupsDialog.prototype, \"sensorGroups\", void 0);\r\n__decorate([\r\n    property()\r\n], ManageSensorGroupsDialog.prototype, \"sensors\", void 0);\r\nManageSensorGroupsDialog = __decorate([\r\n    customElement('manage-sensor-groups-dialog')\r\n], ManageSensorGroupsDialog);\r\nexport { ManageSensorGroupsDialog };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/dialogs/create-sensor-group-dialog.ts"]}
