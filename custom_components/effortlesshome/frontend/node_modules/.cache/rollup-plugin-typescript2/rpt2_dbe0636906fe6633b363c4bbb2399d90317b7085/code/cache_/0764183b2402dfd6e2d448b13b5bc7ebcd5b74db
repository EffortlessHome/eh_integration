{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { localize } from '../../localize/localize';\r\nimport { fireEvent } from '../fire_event';\r\nexport var ETimeUnits;\r\n(function (ETimeUnits) {\r\n    ETimeUnits[\"Seconds\"] = \"sec\";\r\n    ETimeUnits[\"Minutes\"] = \"min\";\r\n})(ETimeUnits || (ETimeUnits = {}));\r\nconst round = (val, step) => {\r\n    return Math.round(val / step) * step;\r\n};\r\nconst calcStepSize = (min, max) => {\r\n    const stepSizes = [10 / 60, 15 / 60, 20 / 60, 30 / 60, 1, 2, 5];\r\n    let range = max - min;\r\n    let step = range / 12;\r\n    step = stepSizes.reduce((prev, curr) => Math.abs(curr - step) < Math.abs(prev - step) ? curr : prev);\r\n    return step;\r\n};\r\nlet TimeSlider = class TimeSlider extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.min = 0;\r\n        this.max = 100;\r\n        this.value = 0;\r\n        this.step = 0;\r\n        this.scaleFactor = 1;\r\n        this.unit = ETimeUnits.Minutes;\r\n        this.disabled = false;\r\n        this._min = 0;\r\n        this._max = 0;\r\n        this._step = 0;\r\n    }\r\n    firstUpdated() {\r\n        if (this.value > 0 && this.value < 60)\r\n            this.setUnit(ETimeUnits.Seconds);\r\n        else\r\n            this.setUnit(ETimeUnits.Minutes);\r\n    }\r\n    setUnit(unit) {\r\n        this.unit = unit;\r\n        this.scaleFactor = this.unit == ETimeUnits.Minutes ? 1 / 60 : 1;\r\n        this._step = calcStepSize(this.min * this.scaleFactor, (ETimeUnits.Minutes ? this.max : 60) * this.scaleFactor);\r\n        if (this.step && this._step > this.step * this.scaleFactor)\r\n            this._step = this.step * this.scaleFactor;\r\n        let min = this.min * this.scaleFactor;\r\n        if (min < this._step)\r\n            min = this._step;\r\n        this._min = this.min ? round(min, this._step) : 0;\r\n        this._max = (unit == ETimeUnits.Minutes ? round(this.max, this._step) : 60) * this.scaleFactor;\r\n    }\r\n    render() {\r\n        return html `\n      <div class=\"container\">\n        <div class=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </div>\n        <div class=\"slider\">\n          ${this.getSlider()}\n        </div>\n        <div class=\"value${this.disabled ? ' disabled' : ''}\" @click=${this.toggleUnit}>\n          ${this.getValue()}\n        </div>\n      </div>\n    `;\r\n    }\r\n    getValue() {\r\n        const value = round(this.value * this.scaleFactor, this._step);\r\n        if (!value && this.zeroValue) {\r\n            return this.zeroValue;\r\n        }\r\n        return `${value} ${this.getUnit()}`;\r\n    }\r\n    getUnit() {\r\n        switch (this.unit) {\r\n            case ETimeUnits.Seconds:\r\n                return localize('components.time_slider.seconds', this.hass.language);\r\n            case ETimeUnits.Minutes:\r\n                return localize('components.time_slider.minutes', this.hass.language);\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n    getSlider() {\r\n        const val = round(this.value * this.scaleFactor, this._step);\r\n        return html `\n      <ha-slider\n        labeled\n        min=${this._min}\n        max=${this._max}\n        step=${this._step}\n        value=${val}\n        ?disabled=${this.disabled}\n        @change=${this.updateValue}\n      ></ha-slider>\n    `;\r\n    }\r\n    updateValue(e) {\r\n        const value = Number(e.target.value);\r\n        this.value = round(value, this._step) / this.scaleFactor;\r\n        fireEvent(this, 'value-changed', { value: this.value });\r\n    }\r\n    toggleUnit() {\r\n        this.setUnit(this.unit == ETimeUnits.Minutes ? ETimeUnits.Seconds : ETimeUnits.Minutes);\r\n    }\r\n};\r\nTimeSlider.styles = css `\n    :host {\n      display: flex;\n      flex-direction: column;\n      min-width: 250px;\n    }\n\n    div.container {\n      display: grid;\n      grid-template-columns: max-content 1fr 60px;\n      grid-template-rows: min-content;\n      grid-template-areas: 'prefix slider value';\n    }\n\n    div.prefix {\n      grid-area: prefix;\n      display: flex;\n      align-items: center;\n    }\n\n    div.slider {\n      grid-area: slider;\n      display: flex;\n      align-items: center;\n      flex: 1;\n    }\n\n    div.value {\n      grid-area: value;\n      min-width: 40px;\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      cursor: pointer;\n    }\n\n    ha-slider {\n      width: 100%;\n    }\n\n    .disabled {\n      color: var(--disabled-text-color);\n    }\n  `;\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"min\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"max\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"value\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"step\", void 0);\r\n__decorate([\r\n    property()\r\n], TimeSlider.prototype, \"scaleFactor\", void 0);\r\n__decorate([\r\n    property({ type: ETimeUnits })\r\n], TimeSlider.prototype, \"unit\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], TimeSlider.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], TimeSlider.prototype, \"zeroValue\", void 0);\r\nTimeSlider = __decorate([\r\n    customElement('time-slider')\r\n], TimeSlider);\r\nexport { TimeSlider };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/fire_event.ts"]}
