{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement, state } from 'lit/decorators.js';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { fetchSensors, fetchSensorGroups, saveSensorGroup, deleteSensorGroup } from '../data/websockets';\r\nimport { dialogStyle } from '../styles';\r\nimport { localize } from '../../localize/localize';\r\nimport { SubscribeMixin } from '../subscribe-mixin';\r\nimport { computeName, handleError, isDefined, prettyPrint, showErrorDialog, sortAlphabetically } from '../helpers';\r\nimport { ESensorIcons, ESensorTypes } from '../const';\r\nimport '../components/effortlesshome-chip-set';\r\nimport '../components/effortlesshome-select';\r\nlet CreateSensorGroupDialog = class CreateSensorGroupDialog extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.sensorGroups = {};\r\n        this.sensors = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'effortlesshome_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass)\r\n            return;\r\n        this.sensorGroups = await fetchSensorGroups(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n    }\r\n    async showDialog(params) {\r\n        await this._fetchData();\r\n        this._params = params;\r\n        if (params.group_id && Object.keys(this.sensorGroups).includes(params.group_id)) {\r\n            this.data = Object.assign({}, this.sensorGroups[params.group_id]);\r\n        }\r\n        else {\r\n            this.data = {\r\n                name: '',\r\n                entities: [],\r\n                timeout: 600,\r\n                event_count: 2\r\n            };\r\n        }\r\n        await this.updateComplete;\r\n    }\r\n    async closeDialog() {\r\n        this._params = undefined;\r\n    }\r\n    render() {\r\n        if (!this._params)\r\n            return html ``;\r\n        return html `\n      <ha-dialog open .heading=${true} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\n      <ha-dialog-header slot=\"heading\">\n          <ha-icon-button slot=\"navigationIcon\" dialogAction=\"close\" .path=${mdiClose}>\n          </ha-icon-button>\n          <span slot=\"title\">\n            ${this.data.group_id\r\n            ? localize('panels.sensors.dialogs.edit_group.title', this.hass.language, '{name}', this.sensorGroups[this.data.group_id].name)\r\n            : localize('panels.sensors.dialogs.create_group.title', this.hass.language)}\n          </span>\n        </ha-dialog-header>\n        <div class=\"wrapper\">\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.name.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.name.description', this.hass.language)}\n            </span>\n            <ha-textfield\n              label=${this.hass.localize('ui.components.area-picker.add_dialog.name')}\n              @input=${(ev) => (this.data = { ...this.data, name: String(ev.target.value).trim() })}\n              value=\"${this.data.name}\"\n            ></ha-textfield>\n          </settings-row>\n\n          <settings-row large dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.sensors.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.sensors.description', this.hass.language)}\n            </span>\n            <div>\n              ${this.renderSensorOptions()}\n            </div>\n          </settings-row>\n\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.timeout.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.timeout.description', this.hass.language)}\n            </span>\n            <time-slider\n              .hass=${this.hass}\n              min=\"10\"\n              max=\"900\"\n              .value=${this.data.timeout}\n              @value-changed=${(ev) => (this.data = { ...this.data, timeout: ev.detail.value })}\n            ></time-slider>\n          </settings-row>\n\n          ${this.data.entities.length > 2\r\n            ? html `\n          <settings-row dialog>\n            <span slot=\"heading\">\n              ${localize('panels.sensors.dialogs.create_group.fields.event_count.heading', this.hass.language)}\n            </span>\n            <span slot=\"description\">\n              ${localize('panels.sensors.dialogs.create_group.fields.event_count.description', this.hass.language)}\n            </span>\n            <effortlesshome-select\n              .hass=${this.hass}\n              .items=${this.renderSensorCountOptions()}\n              ?disabled=${this.data.entities.length <= 2}\n              @value-changed=${(ev) => { this.data = { ...this.data, event_count: Number(ev.detail.value) }; }}\n              .value=${String(this.data.event_count > this.data.entities.length ? this.data.entities.length : this.data.event_count)}\n            ></effortlesshome-select>\n          </settings-row>\n          `\r\n            : ''}\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.saveClick}>\n          ${this.hass.localize('ui.common.save')}\n        </mwc-button>\n        ${this.data.group_id\r\n            ? html `\n              <mwc-button slot=\"secondaryAction\" @click=${this.deleteClick} class=\"warning\">\n                ${this.hass.localize('ui.common.delete')}\n              </mwc-button>\n            `\r\n            : ''}\n      </ha-dialog>\n    `;\r\n    }\r\n    renderSensorOptions() {\r\n        const sensors = Object.keys(this.sensors)\r\n            .filter(e => !isDefined(this.sensors[e].group) || this.sensors[e].group === this.data.group_id)\r\n            .map(e => {\r\n            const stateObj = this.hass.states[e];\r\n            const type = Object.entries(ESensorTypes).find(([, v]) => v == this.sensors[e].type)[0];\r\n            return {\r\n                value: e,\r\n                name: prettyPrint(computeName(stateObj)),\r\n                icon: ESensorIcons[type],\r\n            };\r\n        });\r\n        sensors.sort(sortAlphabetically);\r\n        if (!sensors.length)\r\n            return localize('panels.sensors.cards.sensors.no_items', this.hass.language);\r\n        return html `\n      <effortlesshome-chip-set\n        .items=${sensors}\n        .value=${this.data.entities}\n        ?selectable=${true}\n        @value-changed=${(ev) => (this.data = { ...this.data, entities: ev.detail })}\n      ></effortlesshome-chip-set>\n    `;\r\n    }\r\n    renderSensorCountOptions() {\r\n        let options = [];\r\n        for (let i = 2; i <= this.data.entities.length; i++) {\r\n            options = [...options, {\r\n                    name: `${i}`,\r\n                    value: `${i}`\r\n                }];\r\n        }\r\n        return options;\r\n    }\r\n    saveClick(ev) {\r\n        if (!this.data.name.length)\r\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.invalid_name', this.hass.language));\r\n        else if ((!this.data.group_id || this.data.name != this.sensorGroups[this.data.group_id].name) &&\r\n            Object.values(this.sensorGroups).find(e => e.name.toLowerCase() == this.data.name.toLowerCase()))\r\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.invalid_name', this.hass.language));\r\n        else if (this.data.entities.length < 2)\r\n            showErrorDialog(ev, localize('panels.sensors.dialogs.create_group.errors.insufficient_sensors', this.hass.language));\r\n        else {\r\n            if (this.data.event_count > this.data.entities.length)\r\n                this.data = Object.assign(Object.assign({}, this.data), { event_count: this.data.entities.length });\r\n            saveSensorGroup(this.hass, this.data)\r\n                .catch(e => handleError(e, ev))\r\n                .then(() => {\r\n                this.closeDialog();\r\n            });\r\n        }\r\n    }\r\n    deleteClick(ev) {\r\n        if (!this.data.group_id)\r\n            return;\r\n        deleteSensorGroup(this.hass, this.data.group_id)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => {\r\n            this.closeDialog();\r\n        });\r\n    }\r\n    static get styles() {\r\n        return css `\n      ${dialogStyle}\n      div.wrapper {\n        color: var(--primary-text-color);\n      }\n      mwc-button.warning {\n        --mdc-theme-primary: var(--error-color);\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], CreateSensorGroupDialog.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], CreateSensorGroupDialog.prototype, \"_params\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateSensorGroupDialog.prototype, \"sensorGroups\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateSensorGroupDialog.prototype, \"sensors\", void 0);\r\n__decorate([\r\n    property()\r\n], CreateSensorGroupDialog.prototype, \"data\", void 0);\r\nCreateSensorGroupDialog = __decorate([\r\n    customElement('create-sensor-group-dialog')\r\n], CreateSensorGroupDialog);\r\nexport { CreateSensorGroupDialog };\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/lit/decorators.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/@mdi/js/mdi.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/data/websockets.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/styles.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/subscribe-mixin.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-select.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-chip-set.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/components/effortlesshome-select.ts"]}
