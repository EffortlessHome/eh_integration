{"code":"import { EArmModes } from '../types';\r\nimport { computeDomain, computeName, getDomain, sortAlphabetically } from '../helpers';\r\nimport { ESensorTypes, ESensorIcons } from '../const';\r\nimport { localize } from '../../localize/localize';\r\nexport const isValidSensor = (entity, showAllDeviceClasses) => {\r\n    const domain = getDomain(entity.entity_id);\r\n    if (domain == 'binary_sensor') {\r\n        if (showAllDeviceClasses)\r\n            return true;\r\n        const type = entity.attributes.device_class;\r\n        if (!type)\r\n            return false;\r\n        if ([\r\n            'carbon_monoxide',\r\n            'door',\r\n            'garage_door',\r\n            'gas',\r\n            'heat',\r\n            'lock',\r\n            'moisture',\r\n            'motion',\r\n            'moving',\r\n            'occupancy',\r\n            'opening',\r\n            'presence',\r\n            'safety',\r\n            'smoke',\r\n            'sound',\r\n            'tamper',\r\n            'vibration',\r\n            'window',\r\n        ].includes(type))\r\n            return true;\r\n        return false;\r\n    }\r\n    return false;\r\n};\r\nexport const sensorClassToType = (stateObj) => {\r\n    switch (stateObj.attributes.device_class) {\r\n        case 'door':\r\n        case 'garage_door':\r\n        case 'lock':\r\n        case 'opening':\r\n            return ESensorTypes.Door;\r\n        case 'window':\r\n            return ESensorTypes.Window;\r\n        case 'carbon_monoxide':\r\n        case 'gas':\r\n        case 'heat':\r\n        case 'moisture':\r\n        case 'smoke':\r\n        case 'safety':\r\n            return ESensorTypes.Environmental;\r\n        case 'motion':\r\n        case 'moving':\r\n        case 'occupancy':\r\n        case 'presence':\r\n            return ESensorTypes.Motion;\r\n        case 'sound':\r\n        case 'vibration':\r\n        case 'tamper':\r\n            return ESensorTypes.Tamper;\r\n        default:\r\n            return;\r\n    }\r\n};\r\nexport const sensorConfigByType = (modeList) => {\r\n    const filterModes = (modes) => modes.filter(e => modeList.includes(e));\r\n    return {\r\n        [ESensorTypes.Door]: {\r\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedHome, EArmModes.ArmedNight, EArmModes.ArmedVacation]),\r\n            always_on: false,\r\n            allow_open: false,\r\n            arm_on_close: false,\r\n            use_entry_delay: true,\r\n            use_exit_delay: true,\r\n        },\r\n        [ESensorTypes.Window]: {\r\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedHome, EArmModes.ArmedNight, EArmModes.ArmedVacation]),\r\n            always_on: false,\r\n            allow_open: false,\r\n            arm_on_close: false,\r\n            use_entry_delay: false,\r\n            use_exit_delay: false,\r\n        },\r\n        [ESensorTypes.Motion]: {\r\n            modes: filterModes([EArmModes.ArmedAway, EArmModes.ArmedVacation]),\r\n            always_on: false,\r\n            allow_open: true,\r\n            arm_on_close: false,\r\n            use_entry_delay: true,\r\n            use_exit_delay: true,\r\n        },\r\n        [ESensorTypes.Tamper]: {\r\n            modes: filterModes([\r\n                EArmModes.ArmedAway,\r\n                EArmModes.ArmedHome,\r\n                EArmModes.ArmedNight,\r\n                EArmModes.ArmedVacation,\r\n                EArmModes.ArmedCustom,\r\n            ]),\r\n            always_on: false,\r\n            allow_open: false,\r\n            arm_on_close: false,\r\n            use_entry_delay: false,\r\n            use_exit_delay: false,\r\n        },\r\n        [ESensorTypes.Environmental]: {\r\n            modes: filterModes([\r\n                EArmModes.ArmedAway,\r\n                EArmModes.ArmedHome,\r\n                EArmModes.ArmedNight,\r\n                EArmModes.ArmedVacation,\r\n                EArmModes.ArmedCustom,\r\n            ]),\r\n            always_on: true,\r\n            allow_open: false,\r\n            arm_on_close: false,\r\n            use_entry_delay: false,\r\n            use_exit_delay: false,\r\n        },\r\n    };\r\n};\r\nexport function defaultSensorConfig(stateObj, modeList) {\r\n    if (!stateObj)\r\n        return null;\r\n    const domain = computeDomain(stateObj.entity_id);\r\n    let config = {\r\n        entity_id: stateObj.entity_id,\r\n        modes: [],\r\n        use_entry_delay: true,\r\n        use_exit_delay: true,\r\n        arm_on_close: false,\r\n        allow_open: false,\r\n        always_on: false,\r\n        auto_bypass: false,\r\n        auto_bypass_modes: [],\r\n        trigger_unavailable: false,\r\n        type: ESensorTypes.Other,\r\n        enabled: true,\r\n    };\r\n    if (domain == 'binary_sensor') {\r\n        const type = sensorClassToType(stateObj);\r\n        if (type) {\r\n            config = Object.assign(Object.assign(Object.assign({}, config), { type: type }), sensorConfigByType(modeList)[type]);\r\n        }\r\n    }\r\n    return config;\r\n}\r\nexport const getSensorTypeOptions = (hass) => Object.entries(ESensorTypes)\r\n    .filter(([, e]) => e != ESensorTypes.Other)\r\n    .map(([k, v]) => Object({\r\n    value: v,\r\n    name: localize(`panels.sensors.cards.editor.fields.device_type.choose.${v}.name`, hass.language),\r\n    description: localize(`panels.sensors.cards.editor.fields.device_type.choose.${v}.description`, hass.language),\r\n    icon: ESensorIcons[k],\r\n}));\r\nexport const getConfigurableSensors = (hass, includedSensors, showAllBinarySensors = false) => {\r\n    const list = Object.values(hass.states)\r\n        .filter(e => isValidSensor(e, showAllBinarySensors))\r\n        .filter(e => !includedSensors.includes(e.entity_id))\r\n        .map(e => Object({\r\n        id: e.entity_id,\r\n        name: computeName(e),\r\n        icon: binarySensorIcon(e),\r\n    }));\r\n    list.sort(sortAlphabetically);\r\n    return list;\r\n};\r\nexport const binarySensorIcon = (stateObj, state) => {\r\n    const is_off = state === 'off';\r\n    switch (stateObj === null || stateObj === void 0 ? void 0 : stateObj.attributes.device_class) {\r\n        case 'battery':\r\n            return is_off ? 'mdi:battery' : 'mdi:battery-outline';\r\n        case 'battery_charging':\r\n            return is_off ? 'mdi:battery' : 'mdi:battery-charging';\r\n        case 'cold':\r\n            return is_off ? 'mdi:thermometer' : 'mdi:snowflake';\r\n        case 'connectivity':\r\n            return is_off ? 'mdi:server-network-off' : 'mdi:server-network';\r\n        case 'door':\r\n            return is_off ? 'mdi:door-closed' : 'mdi:door-open';\r\n        case 'garage_door':\r\n            return is_off ? 'mdi:garage' : 'mdi:garage-open';\r\n        case 'power':\r\n            return is_off ? 'mdi:power-plug-off' : 'mdi:power-plug';\r\n        case 'gas':\r\n        case 'problem':\r\n        case 'safety':\r\n        case 'tamper':\r\n            return is_off ? 'mdi:check-circle' : 'mdi:alert-circle';\r\n        case 'smoke':\r\n            return is_off ? 'mdi:check-circle' : 'mdi:smoke';\r\n        case 'heat':\r\n            return is_off ? 'mdi:thermometer' : 'mdi:fire';\r\n        case 'light':\r\n            return is_off ? 'mdi:brightness-5' : 'mdi:brightness-7';\r\n        case 'lock':\r\n            return is_off ? 'mdi:lock' : 'mdi:lock-open';\r\n        case 'moisture':\r\n            return is_off ? 'mdi:water-off' : 'mdi:water';\r\n        case 'motion':\r\n            return is_off ? 'mdi:walk' : 'mdi:run';\r\n        case 'occupancy':\r\n            return is_off ? 'mdi:home-outline' : 'mdi:home';\r\n        case 'opening':\r\n            return is_off ? 'mdi:square' : 'mdi:square-outline';\r\n        case 'plug':\r\n            return is_off ? 'mdi:power-plug-off' : 'mdi:power-plug';\r\n        case 'presence':\r\n            return is_off ? 'mdi:home-outline' : 'mdi:home';\r\n        case 'running':\r\n            return is_off ? 'mdi:stop' : 'mdi:play';\r\n        case 'sound':\r\n            return is_off ? 'mdi:music-note-off' : 'mdi:music-note';\r\n        case 'update':\r\n            return is_off ? 'mdi:package' : 'mdi:package-up';\r\n        case 'vibration':\r\n            return is_off ? 'mdi:crop-portrait' : 'mdi:vibrate';\r\n        case 'window':\r\n            return is_off ? 'mdi:window-closed' : 'mdi:window-open';\r\n        default:\r\n            return is_off ? 'mdi:radiobox-blank' : 'mdi:checkbox-marked-circle';\r\n    }\r\n};\r\n","references":["/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/types.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/helpers.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/src/const.ts","/Users/jermiecullip/Documents/eh_integration/custom_components/effortlesshome/frontend/localize/localize.ts"]}
